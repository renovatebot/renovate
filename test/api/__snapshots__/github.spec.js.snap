// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api/github addAssignees(issueNo, assignees) should add the given assignees to the issue 1`] = `
Array [
  Array [
    "repos/some/repo/issues/42/assignees",
    Object {
      "body": Object {
        "assignees": Array [
          "someuser",
          "someotheruser",
        ],
      },
    },
  ],
]
`;

exports[`api/github addLabels(issueNo, labels) should add the given labels to the issue 1`] = `
Array [
  Array [
    "repos/some/repo/issues/42/labels",
    Object {
      "body": Array [
        "foo",
        "bar",
      ],
    },
  ],
]
`;

exports[`api/github addReviewers(issueNo, reviewers) should add the given reviewers to the PR 1`] = `
Array [
  Array [
    "repos/some/repo/pulls/42/requested_reviewers",
    Object {
      "body": Object {
        "reviewers": Array [
          "someuser",
          "someotheruser",
        ],
      },
      "headers": Object {
        "accept": "application/vnd.github.thor-preview+json",
      },
    },
  ],
]
`;

exports[`api/github branchExists(branchName) should propagate unknown errors 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github branchExists(branchName) should return false if a 404 is returned 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github branchExists(branchName) should return false if the branch does not exist (multiple results) 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github branchExists(branchName) should return false if the branch does not exist (one result) 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github branchExists(branchName) should return true if the branch exists (multiple results) 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github branchExists(branchName) should return true if the branch exists (one result) 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a commit to a new branch if the branch does not already exist 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/git/commits/1111",
    undefined,
  ],
  Array [
    "repos/some/repo/git/refs/heads/package.json",
    undefined,
  ],
]
`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a commit to a new branch if the branch does not already exist 2`] = `
Array [
  Array [
    "repos/some/repo/git/blobs",
    Object {
      "body": Object {
        "content": "aGVsbG8gd29ybGQ=",
        "encoding": "base64",
      },
    },
  ],
  Array [
    "repos/some/repo/git/trees",
    Object {
      "body": Object {
        "base_tree": "2222",
        "tree": Array [
          Object {
            "mode": "100644",
            "path": "package.json",
            "sha": "3333",
            "type": "blob",
          },
        ],
      },
    },
  ],
  Array [
    "repos/some/repo/git/commits",
    Object {
      "body": Object {
        "message": "my other commit message",
        "parents": Array [
          "1111",
        ],
        "tree": "4444",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs",
    Object {
      "body": Object {
        "ref": "refs/heads/package.json",
        "sha": "5555",
      },
    },
  ],
]
`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a commit to a new branch if the branch does not already exist 3`] = `Array []`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a new commit to the branch 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/git/commits/1111",
    undefined,
  ],
  Array [
    "repos/some/repo/git/refs/heads/package.json",
    undefined,
  ],
]
`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a new commit to the branch 2`] = `
Array [
  Array [
    "repos/some/repo/git/blobs",
    Object {
      "body": Object {
        "content": "aGVsbG8gd29ybGQ=",
        "encoding": "base64",
      },
    },
  ],
  Array [
    "repos/some/repo/git/trees",
    Object {
      "body": Object {
        "base_tree": "2222",
        "tree": Array [
          Object {
            "mode": "100644",
            "path": "package.json",
            "sha": "3333",
            "type": "blob",
          },
        ],
      },
    },
  ],
  Array [
    "repos/some/repo/git/commits",
    Object {
      "body": Object {
        "message": "my commit message",
        "parents": Array [
          "1111",
        ],
        "tree": "4444",
      },
    },
  ],
]
`;

exports[`api/github commitFilesToBranch(branchName, files, message, parentBranch) should add a new commit to the branch 3`] = `
Array [
  Array [
    "repos/some/repo/git/refs/heads/package.json",
    Object {
      "body": Object {
        "force": true,
        "sha": "5555",
      },
    },
  ],
]
`;

exports[`api/github createPr(branchName, title, body) should create and return a PR object 1`] = `
Object {
  "displayNumber": "Pull Request #123",
  "number": 123,
}
`;

exports[`api/github createPr(branchName, title, body) should create and return a PR object 2`] = `
Array [
  Array [
    "repos/some/repo/pulls",
    Object {
      "body": Object {
        "base": "master",
        "body": "Hello world",
        "head": "some-branch",
        "title": "The Title",
      },
    },
  ],
]
`;

exports[`api/github createPr(branchName, title, body) should use defaultBranch 1`] = `
Object {
  "displayNumber": "Pull Request #123",
  "number": 123,
}
`;

exports[`api/github createPr(branchName, title, body) should use defaultBranch 2`] = `
Array [
  Array [
    "repos/some/repo/pulls",
    Object {
      "body": Object {
        "base": "master",
        "body": "Hello world",
        "head": "some-branch",
        "title": "The Title",
      },
    },
  ],
]
`;

exports[`api/github findFilePaths(fileName) paginates 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "search/code?q=repo:some/repo+filename:package.json&per_page=100",
    undefined,
  ],
  Array [
    "search/code?q=repo%3Arenovate-tests%2Fonboarding-1+filename%3Apackage.json&per_page=2&page=2",
    undefined,
  ],
]
`;

exports[`api/github findFilePaths(fileName) paginates 2`] = `
Array [
  "package.json",
  "src/app/package.json",
  "src/otherapp/package.json",
]
`;

exports[`api/github findFilePaths(fileName) should return empty array if none found 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "search/code?q=repo:some/repo+filename:package.json&per_page=100",
    undefined,
  ],
]
`;

exports[`api/github findFilePaths(fileName) should return the files matching the fileName 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "search/code?q=some-content+repo:some/repo+filename:package.json&per_page=100",
    undefined,
  ],
]
`;

exports[`api/github findFilePaths(fileName) should return the files matching the fileName 2`] = `
Array [
  "package.json",
  "src/app/package.json",
  "src/otherapp/package.json",
]
`;

exports[`api/github findPr(branchName, prTitle, state) should return a PR object 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/pulls?head=theowner:master&state=all",
    undefined,
  ],
]
`;

exports[`api/github findPr(branchName, prTitle, state) should return a PR object 2`] = `
Object {
  "displayNumber": "Pull Request #42",
  "number": 42,
  "state": "open",
  "title": "PR Title",
}
`;

exports[`api/github findPr(branchName, prTitle, state) should return null if no PR's are found 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/pulls?head=theowner:master&state=all",
    undefined,
  ],
]
`;

exports[`api/github findPr(branchName, prTitle, state) should set the isClosed attribute of the PR to true if the PR is closed 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/pulls?head=theowner:master&state=all",
    undefined,
  ],
]
`;

exports[`api/github findPr(branchName, prTitle, state) should set the isClosed attribute of the PR to true if the PR is closed 2`] = `
Object {
  "displayNumber": "Pull Request #42",
  "isClosed": true,
  "number": 42,
  "state": "closed",
  "title": "PR Title",
}
`;

exports[`api/github getAllPrs() maps results to simple array 1`] = `
Array [
  Object {
    "branchName": "renovate/a",
    "number": 5,
  },
  Object {
    "branchName": "not-renovate",
    "number": 6,
  },
  Object {
    "branchName": "renovate/b",
    "number": 9,
  },
]
`;

exports[`api/github getAllRenovateBranches() should return all renovate branches 1`] = `
Array [
  "renovate/a",
  "renovate/b",
]
`;

exports[`api/github getBranchLastCommitTime should return a Date 1`] = `2011-04-14T16:00:49.000Z`;

exports[`api/github getBranchPr(branchName) should return null if no PR exists 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/pulls?state=open&base=master&head=theowner:somebranch",
    undefined,
  ],
]
`;

exports[`api/github getBranchPr(branchName) should return the PR object 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/pulls?state=open&base=master&head=theowner:somebranch",
    undefined,
  ],
  Array [
    "repos/some/repo/pulls/91",
    undefined,
  ],
]
`;

exports[`api/github getBranchPr(branchName) should return the PR object 2`] = `
Object {
  "additions": 1,
  "base": Object {
    "sha": "1234",
  },
  "canRebase": true,
  "commits": 1,
  "deletions": 1,
  "displayNumber": "Pull Request #91",
  "number": 91,
}
`;

exports[`api/github getCommitMessages() returns commits messages 1`] = `
Array [
  "foo",
  "bar",
]
`;

exports[`api/github getFile(filePatch, branchName) should return the encoded file content 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/package.json?ref=master",
    undefined,
  ],
]
`;

exports[`api/github getFileContent(filePatch, branchName) should return null if GitHub returns a 404 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/package.json?ref=master",
    undefined,
  ],
]
`;

exports[`api/github getFileContent(filePatch, branchName) should return the encoded file content 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/package.json?ref=master",
    undefined,
  ],
]
`;

exports[`api/github getFileJson(filePatch, branchName) should return null if invalid JSON 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/package.json?ref=master",
    undefined,
  ],
]
`;

exports[`api/github getFileJson(filePatch, branchName) should return the file contents parsed as JSON 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/package.json?ref=master",
    undefined,
  ],
]
`;

exports[`api/github getFileJson(filePatch, branchName) should return the file contents parsed as JSON 2`] = `
Object {
  "hello": "world",
}
`;

exports[`api/github getInstallationRepositories should return an array of repositories 1`] = `
Array [
  Array [
    "installation/repositories",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "token sometoken",
      },
    },
  ],
]
`;

exports[`api/github getInstallationRepositories should return an array of repositories 2`] = `
Object {
  "repositories": Array [
    "a",
    "b",
  ],
  "total_count": 2,
}
`;

exports[`api/github getInstallationToken should retry posts 1`] = `Array []`;

exports[`api/github getInstallationToken should retry posts 2`] = `"aUserToken"`;

exports[`api/github getInstallationToken should return an installation token 1`] = `Array []`;

exports[`api/github getInstallationToken should return an installation token 2`] = `"aUserToken"`;

exports[`api/github getInstallations should retry 502s once 1`] = `
Array [
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
]
`;

exports[`api/github getInstallations should retry 502s once 2`] = `
Array [
  "a",
  "b",
]
`;

exports[`api/github getInstallations should retry 502s until success 1`] = `
Array [
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
]
`;

exports[`api/github getInstallations should retry 502s until success 2`] = `
Array [
  "a",
  "b",
]
`;

exports[`api/github getInstallations should return an array of installations 1`] = `
Array [
  Array [
    "app/installations",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.machine-man-preview+json",
        "authorization": "Bearer sometoken",
      },
    },
  ],
]
`;

exports[`api/github getInstallations should return an array of installations 2`] = `
Array [
  "a",
  "b",
]
`;

exports[`api/github getPr(prNo) should return a PR object - 0 1`] = `
Object {
  "base": Object {
    "sha": "1234",
  },
  "displayNumber": "Pull Request #1",
  "isClosed": true,
  "number": 1,
  "state": "closed",
}
`;

exports[`api/github getPr(prNo) should return a PR object - 1 1`] = `
Object {
  "base": Object {
    "sha": "1234",
  },
  "canRebase": true,
  "commits": 1,
  "displayNumber": "Pull Request #1",
  "isUnmergeable": true,
  "mergeable_state": "dirty",
  "number": 1,
  "state": "open",
}
`;

exports[`api/github getPr(prNo) should return a PR object - 2 1`] = `
Object {
  "base": Object {
    "sha": "5678",
  },
  "canRebase": true,
  "commits": 1,
  "displayNumber": "Pull Request #1",
  "isStale": true,
  "number": 1,
  "state": "open",
}
`;

exports[`api/github getPr(prNo) should return a rebaseable PR despite multiple commits 1`] = `
Object {
  "base": Object {
    "sha": "1234",
  },
  "canRebase": true,
  "commits": 2,
  "displayNumber": "Pull Request #1",
  "isUnmergeable": true,
  "mergeable_state": "dirty",
  "number": 1,
  "state": "open",
}
`;

exports[`api/github getPr(prNo) should return an unrebaseable PR if multiple authors 1`] = `
Object {
  "base": Object {
    "sha": "1234",
  },
  "commits": 2,
  "displayNumber": "Pull Request #1",
  "isUnmergeable": true,
  "mergeable_state": "dirty",
  "number": 1,
  "state": "open",
}
`;

exports[`api/github getRepos should return an array of repos 1`] = `
Array [
  Array [
    "user/repos",
    undefined,
  ],
]
`;

exports[`api/github getRepos should return an array of repos 2`] = `
Array [
  "a/b",
  "c/d",
]
`;

exports[`api/github getRepos should support a custom endpoint 1`] = `
Array [
  Array [
    "user/repos",
    undefined,
  ],
]
`;

exports[`api/github getRepos should support a custom endpoint 2`] = `
Array [
  "a/b",
  "c/d",
]
`;

exports[`api/github getSubDirectories(path) should return subdirectories 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/contents/some-path",
    undefined,
  ],
]
`;

exports[`api/github getSubDirectories(path) should return subdirectories 2`] = `
Array [
  "a",
]
`;

exports[`api/github initRepo should detect repoForceRebase 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": true,
}
`;

exports[`api/github initRepo should ignore repoForceRebase 403 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should ignore repoForceRebase 404 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should initialise the config for the repo - 0 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
]
`;

exports[`api/github initRepo should initialise the config for the repo - 0 2`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should initialise the config for the repo - 1 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
]
`;

exports[`api/github initRepo should initialise the config for the repo - 1 2`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should initialise the config for the repo - 2 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
]
`;

exports[`api/github initRepo should initialise the config for the repo - 2 2`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should merge 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should not guess at merge 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should rebase 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github initRepo should squash 1`] = `
Object {
  "isFork": false,
  "privateRepo": false,
  "repoForceRebase": false,
}
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-merge-commit merge 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-merge-commit merge 2`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-merge-commit merge 3`] = `
Array [
  Array [
    "repos/some/repo/merges",
    Object {
      "body": Object {
        "base": "master",
        "head": "thebranchname",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-merge-commit merge 4`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-merge-commit merge 5`] = `
Array [
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-push merge 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-push merge 2`] = `
Array [
  Array [
    "repos/some/repo/git/refs/heads/master",
    Object {
      "body": Object {
        "sha": "1235",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-push merge 3`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-push merge 4`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should perform a branch-push merge 5`] = `
Array [
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 1`] = `[Error: branch-push failed]`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 2`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 3`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 4`] = `
Array [
  Array [
    "repos/some/repo/merges",
    Object {
      "body": Object {
        "base": "master",
        "head": "thebranchname",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 5`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-merge-commit throws 6`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 1`] = `[Error: branch-push failed]`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 2`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/thebranchname",
    undefined,
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 3`] = `
Array [
  Array [
    "repos/some/repo/git/refs/heads/master",
    Object {
      "body": Object {
        "sha": "1235",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 4`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 5`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if branch-push merge throws 6`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 1`] = `[Error: Unsupported branch merge type: wrong-merge-type]`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 2`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
]
`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 3`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 4`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 5`] = `Array []`;

exports[`api/github mergeBranch(branchName, mergeType) should throw if unknown merge type 6`] = `Array []`;

exports[`api/github setBaseBranch(branchName) sets the base branch 1`] = `
Array [
  Array [
    "repos/some/repo",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/master",
    undefined,
  ],
  Array [
    "repos/some/repo/branches/master/protection/required_status_checks",
    Object {
      "headers": Object {
        "accept": "application/vnd.github.loki-preview+json",
      },
    },
  ],
  Array [
    "repos/some/repo/git/refs/heads/some-branch",
    undefined,
  ],
]
`;

exports[`api/github updatePr(prNo, title, body) should update the PR 1`] = `
Array [
  Array [
    "repos/some/repo/pulls/1234",
    Object {
      "body": Object {
        "body": "Hello world again",
        "title": "The New Title",
      },
    },
  ],
]
`;
