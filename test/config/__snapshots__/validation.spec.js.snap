// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`config/validation validateConfig(config) errors for all types 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "extends: Invalid timezone: Europe/Brussel",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`enabled\` should be boolean. Found: 1 (number)",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`labels\` should be a list (Array)",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`lockFileMaintenance\` should be a json object",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`packageRules[3].packagePatterns\` should be a list (Array)",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`semanticCommitType\` should be a string",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Invalid configuration option: \`packageRules[1].foo\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Invalid regExp for packageRules[3].excludePackagePatterns: \`abc ([a-z]+) ([a-z]+))\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Invalid schedule: \`Schedule \\"every 15 mins every weekday\\" should not specify minutes\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "packageRules must contain JSON objects",
  },
  Object {
    "depName": "Configuration Error",
    "message": "packageRules: Each packageRule must contain at least one selector (paths, languages, managers, depTypeList, packageNames, packagePatterns, excludePackageNames, excludePackagePatterns, sourceUrlPrefixes, updateTypes). If you wish for configuration to apply to all packages, it is not necessary to place it inside a packageRule at all.",
  },
  Object {
    "depName": "Configuration Error",
    "message": "timezone: Invalid timezone: Asia",
  },
]
`;

exports[`config/validation validateConfig(config) errors for unsafe fileMatches 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "Invalid regExp for npm.fileMatch: \`abc ([a-z]+) ([a-z]+))\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Unsafe regExp for docker.fileMatch: \`(x+x+)+y\`",
  },
]
`;

exports[`config/validation validateConfig(config) ignore packageRule nesting validation for presets 1`] = `Array []`;

exports[`config/validation validateConfig(config) included managers of the wrong type 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "Configuration option \`packageRules[0].managers\` should be a list (Array)",
  },
  Object {
    "depName": "Configuration Error",
    "message": "packageRules: Managers should be type of List. You have included string.",
  },
]
`;

exports[`config/validation validateConfig(config) included unsupported manager 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "packageRules:
        You have included an unsupported manager in a package rule. Your list: foo. 
        Supported managers are: (ansible, bazel, buildkite, bundler, cargo, circleci, composer, docker-compose, dockerfile, github-actions, gitlabci, gomod, gradle, gradle-wrapper, kubernetes, maven, meteor, npm, nuget, nvm, pip_requirements, pip_setup, pipenv, terraform, travis).",
  },
]
`;

exports[`config/validation validateConfig(config) returns deprecation warnings 1`] = `
Array [
  Object {
    "depName": "Deprecation Warning",
    "message": "Direct editing of prTitle is now deprecated. Please edit commitMessage subcomponents instead as they will be passed through to prTitle.",
  },
]
`;

exports[`config/validation validateConfig(config) returns nested errors 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "Invalid configuration option: \`foo\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Invalid configuration option: \`lockFileMaintenance.bar\`",
  },
  Object {
    "depName": "Configuration Error",
    "message": "Unsafe regExp for packageRules[0].excludePackagePatterns: \`(x+x+)+y\`",
  },
]
`;

exports[`config/validation validateConfig(config) selectors outside packageRules array trigger errors 1`] = `
Array [
  Object {
    "depName": "Configuration Error",
    "message": "docker.minor.packageNames: packageNames should be inside a \`packageRule\` only",
  },
  Object {
    "depName": "Configuration Error",
    "message": "packageNames: packageNames should be inside a \`packageRule\` only",
  },
]
`;
