// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`config/presets getPreset gets parameterised configs 1`] = `Object {}`;

exports[`config/presets getPreset handles 404 packages 1`] = `Object {}`;

exports[`config/presets getPreset handles missing params 1`] = `Object {}`;

exports[`config/presets getPreset handles no config 1`] = `Object {}`;

exports[`config/presets getPreset handles preset not found 1`] = `Object {}`;

exports[`config/presets getPreset handles throw errors 1`] = `Object {}`;

exports[`config/presets getPreset ignores irrelevant params 1`] = `Object {}`;

exports[`config/presets parsePreset returns default package name 1`] = `
Object {
  "packageName": "renovate-config-default",
  "params": undefined,
  "presetName": "base",
}
`;

exports[`config/presets parsePreset returns default package name with params 1`] = `
Object {
  "packageName": "renovate-config-default",
  "params": Array [
    "packages/eslint",
    "eslint",
  ],
  "presetName": "group",
}
`;

exports[`config/presets parsePreset returns non-scoped default 1`] = `
Object {
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns non-scoped package name 1`] = `
Object {
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns non-scoped package name full 1`] = `
Object {
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns non-scoped package name with params 1`] = `
Object {
  "packageName": "renovate-config-somepackage",
  "params": Array [
    "param1",
  ],
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns scope with packageName and default 1`] = `
Object {
  "packageName": "@somescope/somepackagename",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns scope with packageName and params and default 1`] = `
Object {
  "packageName": "@somescope/somepackagename",
  "params": Array [
    "param1",
    "param2",
    "param3",
  ],
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns scope with packageName and presetName 1`] = `
Object {
  "packageName": "@somescope/somepackagename",
  "params": undefined,
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with packageName and presetName and params 1`] = `
Object {
  "packageName": "@somescope/somepackagename",
  "params": Array [
    "param1",
    "param2",
  ],
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with presetName 1`] = `
Object {
  "packageName": "@somescope/renovate-config",
  "params": undefined,
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with presetName and params 1`] = `
Object {
  "packageName": "@somescope/renovate-config",
  "params": Array [
    "param1",
  ],
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns simple scope 1`] = `
Object {
  "packageName": "@somescope/renovate-config",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns simple scope and params 1`] = `
Object {
  "packageName": "@somescope/renovate-config",
  "params": Array [
    "param1",
  ],
  "presetName": "default",
}
`;

exports[`config/presets replaceArgs replaces args in strings 1`] = `"c foo ab"`;

exports[`config/presets replaceArgs replaces arrays 1`] = `
Object {
  "foo": Array [
    "a",
    Object {
      "bar": "b",
      "baz": 5,
    },
  ],
}
`;

exports[`config/presets replaceArgs replaces objects 1`] = `
Object {
  "bar": Object {
    "aaa": Object {
      "bbb": "woo c",
    },
    "baz": "b boo",
  },
  "foo": "ha a",
}
`;

exports[`config/presets resolvePreset returns same if invalid preset 1`] = `
Object {
  "foo": 1,
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
}
`;

exports[`config/presets resolvePreset returns same if no presets 1`] = `
Object {
  "foo": 1,
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
}
`;
