// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`config/presets resolvePreset combines two package alls 1`] = `
Object {
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "packagePatterns": Array [
    "^eslint",
    "^stylelint",
  ],
}
`;

exports[`config/presets resolvePreset resolves app preset 1`] = `
Object {
  "automerge": "none",
  "branchprefix": "renovate/",
  "dependencies": Object {
    "description": Array [
      "Use \\"fix(deps):\\" as semantic prefix for commit messages and PR titles",
    ],
    "semanticPrefix": "fix(deps):",
  },
  "description": Array [
    "Separate major versions of dependencies into individual branches/PRs",
    "Use the same branch/PR for both patch and minor upgrades of a dependency",
    "Only upgrade to stable npm versions",
    "Do not upgrade versions past the \\"latest\\" tag in npm registry",
    "Create branches/PRs for dependency upgrades as soon as they're available",
    "Wait until branch tests have passed or failed before creating the PR",
    "Use \\"renovate/\\" as prefix for all branch names",
    "If semantic commits detected, use \\"fix(deps):\\" for dependencies and \\"chore(deps):\\" for all others",
    "Do not automerge any upgrades - wait for humans to merge PRs",
    "Update existing lock files only when package.json is modified",
    "Use version pinning (maintain a single version only and not semver ranges)",
  ],
  "devDependencies": Object {
    "description": Array [
      "Use \\"chore(deps):\\" as semantic prefix for commit messages and PR titles",
    ],
    "semanticPrefix": "chore(deps):",
  },
  "ignoreUnstable": true,
  "lockFileMaintenance": Object {
    "enabled": false,
  },
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "optionalDependencies": Object {
    "description": Array [
      "Use \\"chore(deps):\\" as semantic prefix for commit messages and PR titles",
    ],
    "semanticPrefix": "chore(deps):",
  },
  "peerDependencies": Object {
    "description": Array [
      "Use \\"chore(deps):\\" as semantic prefix for commit messages and PR titles",
    ],
    "semanticPrefix": "chore(deps):",
  },
  "pinVersions": true,
  "prCreation": "not-pending",
  "respectLatest": true,
  "separateMajorReleases": true,
  "separatePatchReleases": false,
  "unpublishSafe": false,
}
`;

exports[`config/presets resolvePreset resolves group with parent description 1`] = `
Object {
  "description": Array [
    "Group together jest packages",
  ],
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "packageRules": Array [
    Object {
      "groupName": "jest",
      "packagePatterns": Array [
        "jest",
      ],
    },
  ],
}
`;

exports[`config/presets resolvePreset resolves nested groups 1`] = `
Object {
  "automerge": "any",
  "description": Array [
    "Update lint packages automatically if tests pass",
  ],
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "packagePatterns": Array [
    "^eslint",
    "^remark",
  ],
}
`;

exports[`config/presets resolvePreset resolves packageRule 1`] = `
Object {
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "packageRules": Array [
    Object {
      "groupName": "eslint",
      "packagePatterns": Array [
        "^eslint",
      ],
    },
  ],
}
`;

exports[`config/presets resolvePreset returns same if invalid preset 1`] = `
Object {
  "foo": 1,
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
}
`;

exports[`config/presets resolvePreset returns same if no presets 1`] = `
Object {
  "foo": 1,
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
}
`;

exports[`config/presets resolvePreset works with vaid and invalid 1`] = `
Object {
  "description": Array [
    "Use version pinning (maintain a single version only and not semver ranges)",
  ],
  "foo": 1,
  "logger": Object {
    "child": [Function],
    "debug": [Function],
    "error": [Function],
    "fatal": [Function],
    "info": [Function],
    "trace": [Function],
    "warn": [Function],
  },
  "pinVersions": true,
}
`;
