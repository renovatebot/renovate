// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`config/presets getPreset gets linters 1`] = `
Object {
  "description": Array [
    "All lint-related packages",
  ],
  "extends": Array [
    "packages:eslint",
    "packages:stylelint",
  ],
  "packageNames": Array [
    "remark-lint",
  ],
}
`;

exports[`config/presets getPreset gets parameterised configs 1`] = `
Object {
  "description": Array [
    "Group eslint packages into same branch/PR",
  ],
  "packageRules": Array [
    Object {
      "extends": Array [
        "packages:eslint",
      ],
      "groupName": "eslint",
    },
  ],
}
`;

exports[`config/presets getPreset handles 404 packages 1`] = `undefined`;

exports[`config/presets getPreset handles 404 packages 2`] = `undefined`;

exports[`config/presets getPreset handles 404 packages 3`] = `undefined`;

exports[`config/presets getPreset handles missing params 1`] = `
Object {
  "description": Array [
    "Group {{arg1}} packages into same branch/PR",
  ],
  "packageRules": Array [
    Object {
      "extends": Array [
        "",
      ],
      "groupName": "{{arg1}}",
    },
  ],
}
`;

exports[`config/presets getPreset handles no config 1`] = `undefined`;

exports[`config/presets getPreset handles no config 2`] = `undefined`;

exports[`config/presets getPreset handles no config 3`] = `undefined`;

exports[`config/presets getPreset handles preset not found 1`] = `undefined`;

exports[`config/presets getPreset handles preset not found 2`] = `undefined`;

exports[`config/presets getPreset handles preset not found 3`] = `undefined`;

exports[`config/presets getPreset handles throw errors 1`] = `undefined`;

exports[`config/presets getPreset handles throw errors 2`] = `undefined`;

exports[`config/presets getPreset handles throw errors 3`] = `undefined`;

exports[`config/presets getPreset ignores irrelevant params 1`] = `
Object {
  "description": Array [
    "Use version pinning (maintain a single version only and not semver ranges)",
  ],
  "rangeStrategy": "pin",
}
`;

exports[`config/presets parsePreset parses github 1`] = `
Object {
  "datasource": "github",
  "packageName": "some/repo",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns default package name 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-default",
  "params": undefined,
  "presetName": "base",
}
`;

exports[`config/presets parsePreset returns default package name with params 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-default",
  "params": Array [
    "packages/eslint",
    "eslint",
  ],
  "presetName": "group",
}
`;

exports[`config/presets parsePreset returns non-scoped default 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns non-scoped package name 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns non-scoped package name full 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-somepackage",
  "params": undefined,
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns non-scoped package name with params 1`] = `
Object {
  "datasource": "npm",
  "packageName": "renovate-config-somepackage",
  "params": Array [
    "param1",
  ],
  "presetName": "webapp",
}
`;

exports[`config/presets parsePreset returns scope with packageName and default 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/somepackagename",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns scope with packageName and params and default 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/somepackagename",
  "params": Array [
    "param1",
    "param2",
    "param3",
  ],
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns scope with packageName and presetName 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/somepackagename",
  "params": undefined,
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with packageName and presetName and params 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/somepackagename",
  "params": Array [
    "param1",
    "param2",
  ],
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with presetName 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/renovate-config",
  "params": undefined,
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns scope with presetName and params 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/renovate-config",
  "params": Array [
    "param1",
  ],
  "presetName": "somePresetName",
}
`;

exports[`config/presets parsePreset returns simple scope 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/renovate-config",
  "params": undefined,
  "presetName": "default",
}
`;

exports[`config/presets parsePreset returns simple scope and params 1`] = `
Object {
  "datasource": "npm",
  "packageName": "@somescope/renovate-config",
  "params": Array [
    "param1",
  ],
  "presetName": "default",
}
`;

exports[`config/presets replaceArgs replaces args in strings 1`] = `"c foo ab"`;

exports[`config/presets replaceArgs replaces arrays 1`] = `
Object {
  "foo": Array [
    "a",
    Object {
      "bar": "b",
      "baz": 5,
    },
  ],
}
`;

exports[`config/presets replaceArgs replaces objects 1`] = `
Object {
  "bar": Object {
    "aaa": Object {
      "bbb": "woo c",
    },
    "baz": "b boo",
  },
  "foo": "ha a",
}
`;

exports[`config/presets resolvePreset combines two package alls 1`] = `
Object {
  "packagePatterns": Array [
    "^eslint",
    "^stylelint",
  ],
}
`;

exports[`config/presets resolvePreset migrates automerge in presets 1`] = `
Object {
  "automergeType": "pr",
  "branchPrefix": "renovate/",
  "description": Array [
    "Use <code>renovate/</code> as prefix for all branch names",
    "If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others",
    "Require all status checks to pass before any automerging",
    "Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others",
  ],
  "ignoreUnstable": true,
  "labels": Array [
    "dependencies",
  ],
  "lockFileMaintenance": Object {
    "automerge": true,
    "enabled": true,
    "schedule": Array [
      "before 8am on Monday",
    ],
  },
  "major": Object {
    "automerge": false,
  },
  "minor": Object {
    "automerge": true,
  },
  "packageRules": Array [
    Object {
      "packagePatterns": Array [
        "*",
      ],
      "semanticCommitType": "chore",
    },
    Object {
      "depTypeList": Array [
        "dependencies",
      ],
      "semanticCommitType": "fix",
    },
    Object {
      "packagePatterns": Array [
        "*",
      ],
      "rangeStrategy": "replace",
    },
    Object {
      "depTypeList": Array [
        "devDependencies",
      ],
      "rangeStrategy": "pin",
    },
  ],
  "prCreation": "immediate",
  "rebaseStalePrs": true,
  "requiredStatusChecks": Array [],
  "respectLatest": true,
  "schedule": Array [
    "before 8am",
  ],
  "semanticCommits": true,
  "separateMajorMinor": true,
  "separateMinorPatch": false,
  "timezone": "Asia/Taipei",
  "unpublishSafe": false,
}
`;

exports[`config/presets resolvePreset resolves eslint 1`] = `
Object {
  "packagePatterns": Array [
    "^eslint",
  ],
}
`;

exports[`config/presets resolvePreset resolves group monorepos 1`] = `
Object {
  "packageRules": Array [
    Object {
      "description": Array [
        "Group packages from angular monorepo together",
      ],
      "groupName": "angular monorepo",
      "packagePatterns": Array [
        "^@angular/",
      ],
    },
    Object {
      "description": Array [
        "Group packages from babel monorepo together",
      ],
      "groupName": "babel monorepo",
      "packageNames": Array [
        "babel-cli",
        "babel-code-frame",
        "babel-core",
        "babel-generator",
        "babel-helper-bindify-decorators",
        "babel-helper-builder-binary-assignment-operator-visitor",
        "babel-helper-builder-react-jsx",
        "babel-helper-call-delegate",
        "babel-helper-define-map",
        "babel-helper-explode-assignable-expression",
        "babel-helper-explode-class",
        "babel-helper-fixtures",
        "babel-helper-function-name",
        "babel-helper-get-function-arity",
        "babel-helper-hoist-variables",
        "babel-helper-optimise-call-expression",
        "babel-helper-plugin-test-runner",
        "babel-helper-regex",
        "babel-helper-remap-async-to-generator",
        "babel-helper-replace-supers",
        "babel-helper-transform-fixture-test-runner",
        "babel-helper-wrap-function",
        "babel-helpers",
        "babel-messages",
        "babel-node",
        "babel-plugin-check-es2015-constants",
        "babel-plugin-external-helpers",
        "babel-plugin-syntax-async-functions",
        "babel-plugin-syntax-async-generators",
        "babel-plugin-syntax-class-properties",
        "babel-plugin-syntax-decorators",
        "babel-plugin-syntax-do-expressions",
        "babel-plugin-syntax-dynamic-import",
        "babel-plugin-syntax-exponentiation-operator",
        "babel-plugin-syntax-export-extensions",
        "babel-plugin-syntax-flow",
        "babel-plugin-syntax-function-bind",
        "babel-plugin-syntax-function-sent",
        "babel-plugin-syntax-jsx",
        "babel-plugin-syntax-numeric-separator",
        "babel-plugin-syntax-object-rest-spread",
        "babel-plugin-syntax-optional-catch-binding",
        "babel-plugin-syntax-optional-chaining",
        "babel-plugin-syntax-trailing-function-commas",
        "babel-plugin-syntax-typescript",
        "babel-plugin-transform-async-functions",
        "babel-plugin-transform-async-generator-functions",
        "babel-plugin-transform-async-to-generator",
        "babel-plugin-transform-async-to-module-method",
        "babel-plugin-transform-class-properties",
        "babel-plugin-transform-decorators",
        "babel-plugin-transform-do-expressions",
        "babel-plugin-transform-es2015-arrow-functions",
        "babel-plugin-transform-es2015-block-scoped-functions",
        "babel-plugin-transform-es2015-block-scoping",
        "babel-plugin-transform-es2015-classes",
        "babel-plugin-transform-es2015-computed-properties",
        "babel-plugin-transform-es2015-destructuring",
        "babel-plugin-transform-es2015-duplicate-keys",
        "babel-plugin-transform-es2015-for-of",
        "babel-plugin-transform-es2015-function-name",
        "babel-plugin-transform-es2015-instanceof",
        "babel-plugin-transform-es2015-literals",
        "babel-plugin-transform-es2015-modules-amd",
        "babel-plugin-transform-es2015-modules-commonjs",
        "babel-plugin-transform-es2015-modules-systemjs",
        "babel-plugin-transform-es2015-modules-umd",
        "babel-plugin-transform-es2015-object-super",
        "babel-plugin-transform-es2015-parameters",
        "babel-plugin-transform-es2015-shorthand-properties",
        "babel-plugin-transform-es2015-spread",
        "babel-plugin-transform-es2015-sticky-regex",
        "babel-plugin-transform-es2015-template-literals",
        "babel-plugin-transform-es2015-typeof-symbol",
        "babel-plugin-transform-es2015-unicode-regex",
        "babel-plugin-transform-es3-member-expression-literals",
        "babel-plugin-transform-es3-property-literals",
        "babel-plugin-transform-es5-property-mutators",
        "babel-plugin-transform-eval",
        "babel-plugin-transform-exponentiation-operator",
        "babel-plugin-transform-export-extensions",
        "babel-plugin-transform-flow-comments",
        "babel-plugin-transform-flow-strip-types",
        "babel-plugin-transform-function-bind",
        "babel-plugin-transform-function-sent",
        "babel-plugin-transform-jscript",
        "babel-plugin-transform-new-target",
        "babel-plugin-transform-numeric-separator",
        "babel-plugin-transform-object-assign",
        "babel-plugin-transform-object-rest-spread",
        "babel-plugin-transform-object-set-prototype-of-to-assign",
        "babel-plugin-transform-optional-catch-binding",
        "babel-plugin-transform-optional-chaining",
        "babel-plugin-transform-proto-to-assign",
        "babel-plugin-transform-react-constant-elements",
        "babel-plugin-transform-react-display-name",
        "babel-plugin-transform-react-inline-elements",
        "babel-plugin-transform-react-jsx-compat",
        "babel-plugin-transform-react-jsx-self",
        "babel-plugin-transform-react-jsx-source",
        "babel-plugin-transform-react-jsx",
        "babel-plugin-transform-regenerator",
        "babel-plugin-transform-runtime",
        "babel-plugin-transform-strict-mode",
        "babel-plugin-transform-typescript",
        "babel-polyfill",
        "babel-preset-es2015",
        "babel-preset-es2016",
        "babel-preset-es2017",
        "babel-preset-flow",
        "babel-preset-react",
        "babel-preset-stage-0",
        "babel-preset-stage-1",
        "babel-preset-stage-2",
        "babel-preset-stage-3",
        "babel-preset-typescript",
        "babel-register",
        "babel-runtime",
        "babel-standalone",
        "babel-template",
        "babel-traverse",
        "babel-types",
      ],
    },
    Object {
      "description": Array [
        "Group packages from jest monorepo together",
      ],
      "groupName": "jest monorepo",
      "packageNames": Array [
        "babel-jest",
        "babel-plugin-jest-hoist",
        "babel-preset-jest",
        "eslint-config-fb-strict",
        "eslint-plugin-jest",
        "jest-changed-files",
        "jest-circus",
        "jest-cli",
        "jest-config",
        "jest-diff",
        "jest-docblock",
        "jest-editor-support",
        "jest-environment-jsdom",
        "jest-environment-node",
        "jest-get-type",
        "jest-haste-map",
        "jest-jasmine2",
        "jest-matcher-utils",
        "jest-matchers",
        "jest-message-util",
        "jest-mock",
        "jest-phabricator",
        "jest-regex-util",
        "jest-repl",
        "jest-resolve-dependencies",
        "jest-resolve",
        "jest-runner",
        "jest-runtime",
        "jest-snapshot",
        "jest-test-typescript-parser",
        "jest-util",
        "jest-validate",
        "jest",
        "pretty-format",
      ],
    },
    Object {
      "description": Array [
        "Group packages from lodash monorepo together",
      ],
      "groupName": "lodash monorepo",
      "packageNames": Array [
        "babel-plugin-lodash",
        "lodash-webpack-plugin",
        "lodash-es",
      ],
      "packagePatterns": Array [
        "^lodash",
      ],
    },
    Object {
      "description": Array [
        "Group packages from pouchdb monorepo together",
      ],
      "groupName": "pouchdb monorepo",
      "packageNames": Array [
        "pouchdb-abstract-mapreduce",
        "pouchdb-adapter-fruitdown",
        "pouchdb-adapter-http",
        "pouchdb-adapter-idb",
        "pouchdb-adapter-indexeddb",
        "pouchdb-adapter-leveldb-core",
        "pouchdb-adapter-leveldb",
        "pouchdb-adapter-localstorage",
        "pouchdb-adapter-memory",
        "pouchdb-adapter-node-websql",
        "pouchdb-adapter-utils",
        "pouchdb-adapter-websql-core",
        "pouchdb-adapter-websql",
        "pouchdb-ajax",
        "pouchdb-binary-utils",
        "pouchdb-browser",
        "pouchdb-changes-filter",
        "pouchdb-checkpointer",
        "pouchdb-collate",
        "pouchdb-collections",
        "pouchdb-core",
        "pouchdb-debug",
        "pouchdb-errors",
        "pouchdb-find",
        "pouchdb-for-coverage",
        "pouchdb-generate-replication-id",
        "pouchdb-json",
        "pouchdb-mapreduce-utils",
        "pouchdb-mapreduce",
        "pouchdb-md5",
        "pouchdb-merge",
        "pouchdb-node",
        "pouchdb-promise",
        "pouchdb-replication",
        "pouchdb-selector-core",
        "pouchdb-utils",
        "pouchdb",
        "sublevel-pouchdb",
      ],
    },
    Object {
      "description": Array [
        "Group packages from react monorepo together",
      ],
      "groupName": "react monorepo",
      "packageNames": Array [
        "react-art",
        "react-dom",
        "react-noop-renderer",
        "react-test-renderer",
        "react",
      ],
    },
    Object {
      "description": Array [
        "Group packages from storybook monorepo together",
      ],
      "groupName": "storybook monorepo",
      "packagePatterns": Array [
        "^@storybook/",
      ],
    },
  ],
}
`;

exports[`config/presets resolvePreset resolves linters 1`] = `
Object {
  "description": Array [
    "All lint-related packages",
  ],
  "packageNames": Array [
    "remark-lint",
  ],
  "packagePatterns": Array [
    "^eslint",
    "^stylelint",
  ],
}
`;

exports[`config/presets resolvePreset resolves nested groups 1`] = `
Object {
  "description": Array [
    "Update lint packages automatically if tests pass",
  ],
  "packageRules": Array [
    Object {
      "automerge": true,
      "description": Array [
        "All lint-related packages",
      ],
      "packageNames": Array [
        "remark-lint",
      ],
      "packagePatterns": Array [
        "^eslint",
        "^stylelint",
      ],
    },
  ],
}
`;

exports[`config/presets resolvePreset resolves packageRule 1`] = `
Object {
  "packageRules": Array [
    Object {
      "groupName": "eslint",
      "packagePatterns": Array [
        "^eslint",
      ],
    },
  ],
}
`;

exports[`config/presets resolvePreset returns same if no presets 1`] = `
Object {
  "foo": 1,
}
`;

exports[`config/presets resolvePreset throws if invalid preset 1`] = `undefined`;

exports[`config/presets resolvePreset throws if invalid preset 2`] = `"Preset name not found within published preset config (wrongpreset:invalid-preset)"`;

exports[`config/presets resolvePreset throws if invalid preset 3`] = `undefined`;

exports[`config/presets resolvePreset throws if invalid preset file 1`] = `undefined`;

exports[`config/presets resolvePreset throws if invalid preset file 2`] = `"Cannot find preset's package (notfound)"`;

exports[`config/presets resolvePreset throws if invalid preset file 3`] = `undefined`;

exports[`config/presets resolvePreset throws if valid and invalid 1`] = `undefined`;

exports[`config/presets resolvePreset throws if valid and invalid 2`] = `"Preset name not found within published preset config (wrongpreset:invalid-preset)"`;

exports[`config/presets resolvePreset throws if valid and invalid 3`] = `undefined`;

exports[`config/presets resolvePreset works with valid 1`] = `
Object {
  "description": Array [
    "Use version pinning (maintain a single version only and not semver ranges)",
  ],
  "foo": 1,
  "rangeStrategy": "pin",
}
`;
