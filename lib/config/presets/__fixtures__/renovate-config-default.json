{"_id":"renovate-config-default","_rev":"54-d922124a055ab9fe411146ad1a2bca68","name":"renovate-config-default","description":"Default preset configs for Renovate","dist-tags":{"latest":"0.5.4"},"versions":{"0.0.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.0","scripts":{"np":"np","pretty":"prettier-package-json --write ./package.json"},"devDependencies":{"np":"2.16.0","prettier-package-json":"1.4.0"},"renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"scheduleMondayMornings":{"description":"Schedule to run Mondays before 5am","schedule":"On mondays before 5am"},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Do not automerge any upgrades - wait for humans to merge PRs","automerge":"none"},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","automerge":"patch"},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","automerge":"minor"},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":"any"},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":":scheduleMondayMornings"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Do not upgrade versions past the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":"any"}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.0","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-ajKx6jy0PecwxQa2UrR3PXmHMYBbPc2l4qVXOzshC5tWe5KKVA5/ny1Yjv5rTBJ62xuUh2d6ikXd0qeYeKOfqQ==","shasum":"5b88bf0c205b72579098926cf338c53271e97455","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.0.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.0.tgz_1502884367812_0.5453649370465428"},"directories":{}},"0.0.1":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.1","scripts":{"np":"np","pretty":"prettier-package-json --write ./package.json"},"devDependencies":{"np":"2.16.0","prettier-package-json":"1.4.0"},"renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"scheduleMondayMornings":{"description":"Schedule to run Mondays before 5am","schedule":"On mondays before 5am"},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Do not automerge any upgrades - wait for humans to merge PRs","automerge":"none"},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","automerge":"patch"},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","automerge":"minor"},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":"any"},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":":scheduleMondayMornings"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Do not upgrade versions past the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":"any"}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.1","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-FWr3t/2hO5LEP2SvAFCpGh753jNK01aJf8kyhsRlfCSrvJVajh26ArVm/lKj2FmfKTV6F8ddLyYXxp05s+j/kQ==","shasum":"cb64e8980f499325d3a58fb43d35527866ab1639","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.1.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.1.tgz_1502884421840_0.5322694149799645"},"directories":{}},"0.0.2":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.2","scripts":{"np":"np","pretty":"prettier-package-json --write ./package.json"},"devDependencies":{"np":"2.16.0","prettier-package-json":"1.4.0"},"renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Do not automerge any upgrades - wait for humans to merge PRs","automerge":"none"},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","automerge":"patch"},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","automerge":"minor"},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":"any"},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Do not upgrade versions past the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":"any"}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.2","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-Qx+vAf/loaTujA7u+DNonQ5zyPMTSC5S8pCrPxaLQbOV3Mzv3DQUQXp550H+padRHERTvRxuiiX3vN94Md4KHQ==","shasum":"fada826a1fb4a4822279ea1b3c82f527a3bf9c8b","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.2.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.2.tgz_1503041691583_0.6433005328290164"},"directories":{}},"0.0.3":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.3","scripts":{"pretty":"prettier-package-json --write ./package.json"},"devDependencies":{"prettier-package-json":"1.4.0"},"renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":"none"},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","automerge":"patch"},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","automerge":"minor"},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":"any"},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":"any"}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.3","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-EWaS0Mf1lOBLsbSTLjcbhLNSDhBtk1ljFP77sVHFLmnjYQc/RmhhSn2d1lce4tKXTV9da8YZBaz/mov5IgEdfw==","shasum":"a2917b6a7451daef1bd8598f10c558ff54cad168","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.3.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.3.tgz_1503046336915_0.7909344027284533"},"directories":{}},"0.0.4":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.4","scripts":{"pretty":"prettier-package-json --write ./package.json"},"devDependencies":{"prettier-package-json":"1.4.0"},"renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.4","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-0nXCF/rz3lrdOBPnzYSwWO4HQpNow8aQZwJCBlGQlEVJp7Kpcwf0dHVwBvVJCMbzT1m+85GmZ0seAa6kuJYy8Q==","shasum":"fa29d3cc74664cae043370e75c5a735c97c43e49","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.4.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.4.tgz_1503565787137_0.6079069799743593"},"directories":{}},"0.0.5":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.5","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"docker":{"description":"Enable Dockerfile FROM updating","docker":{"enabled":true}},"meteor":{"description":"Enable Meteor package.js Npm.depends updating","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.5","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-KTzgYI5KTwwFp6c5wnlFfqjePqt/xkjJ9ZENPwFO45MdCzW5gSqmvTnwaxgiwBacw+dMHlg/Co41y+xH032O1g==","shasum":"2fcd35712a9092971cc0aa40905f11ad1d642003","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.5.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.5.tgz_1505374534504_0.46598455822095275"},"directories":{}},"0.0.6":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.6","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"docker":{"description":"Enable Dockerfile FROM updating","docker":{"enabled":true}},"meteor":{"description":"Enable Meteor package.js Npm.depends updating","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prNotPending",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled","group:monorepos"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.6","_npmVersion":"5.3.0","_nodeVersion":"8.5.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-KFlCAAPavJHJ7P3gPyICteQA7GocNKRbvX1zenQMICdZe2yU4vOyhFHWyPryR2YeJWSl50AXXboVuF+tZQYnlg==","shasum":"abd3ba4e38b1d30099e66bb67909e39f8b3b8b8a","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.6.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.6.tgz_1506453817415_0.6310512551572174"},"directories":{}},"0.0.7":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.7","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"docker":{"description":"Enable Dockerfile FROM updating","docker":{"enabled":true}},"meteor":{"description":"Enable Meteor package.js Npm.depends updating","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prImmediately",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled","group:monorepos"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.7","_npmVersion":"5.3.0","_nodeVersion":"8.5.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-ajId26i0M6CChp27tHMeRGzy3VQWQ6mgXrGoYhZ4yB2IUw1VTgu1D7gRd1WAfN2+uCHf6bX2ZR4Hf+wSHlvbAQ==","shasum":"774b3cd702b9763882f47e0519da67d2282bb3fe","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.7.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.7.tgz_1506588098477_0.8140226739924401"},"directories":{}},"0.0.8":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.8","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"docker":{"description":"Enable Dockerfile FROM updating","docker":{"enabled":true}},"meteor":{"description":"Enable Meteor package.js Npm.depends updating","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for repositories","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":respectLatest",":unpublishSafeDisabled",":prImmediately",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled",":maintainLockFilesDisabled","group:monorepos"]},"app":{"description":"Default configuration for webapps","extends":[":pinVersions",":base"]},"library":{"description":"Default configuration for libraries","extends":[":pinOnlyDevDependencies",":base"]}},"_id":"renovate-config-default@0.0.8","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-po5DxptlWXe1F1k/BbDXwErzgE1Lucl8y45ZupXp6jZAj3PvAh2zz/DKJ3FVkBf+BTYQzv8foYEucy60YGlSXA==","shasum":"42752a54abc19a43bcae48ae5c241fc45aef0dd1","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.8.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.8.tgz_1507610784868_0.5685734807047993"},"directories":{}},"0.0.9":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.9","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"javascript":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"Default base configuration for all languages","extends":[":separateMajorMinor",":combinePatchMinorReleases",":ignoreUnstable",":prImmediately",":renovatePrefix",":semanticPrefixFixDepsChoreOthers",":automergeDisabled"]},"base-js":{"description":"Base configuration for Javascript","extends":[":base",":javascript",":maintainLockFilesDisabled",":respectLatest",":unpublishSafeDisabled","group:monorepos"]},"js-app":{"description":"Default configuration for webapps","extends":[":base-js",":pinVersions"]},"js-lib":{"description":"Default configuration for libraries","extends":[":base-js",":pinOnlyDevDependencies"]},"app":{"description":"deprecated alias for js-app","extends":[":js-app"]},"library":{"description":"deprecated alias for js-lib","extends":[":js-lib"]}},"_id":"renovate-config-default@0.0.9","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-kf9dwO1niWbXlXZz59U1Oml+lUUN+CYY9X3flTovT8rmppbSOtGpuXOepJPBsLe72+VLwK/rT1cOBUOAGeygsA==","shasum":"6027e442aa114325a54b99636e9ab6279a14561e","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.9.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.9.tgz_1507624236654_0.7906772010028362"},"directories":{}},"0.0.10":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.10","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"javascript":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.10","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-Pi7mn7eSH14XwzwYgbq+iJ0gyJugsbopZAPiEcRQk8q32TqI7Eg9ysPvPvT2nB0nQ4Czwnqmpg2029zgUyaprg==","shasum":"e177c6a9797fb32652366b4e7782edbb40929972","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.10.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.10.tgz_1507631281955_0.16594986082054675"},"directories":{}},"0.0.11":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.11","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Use the same branch/PR for both patch and minor upgrades of a dependency","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Only upgrade to stable npm versions","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.11","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-0QWwrV2Pt5Nyw7AfyEUu+TwUxQSt2nwVH1UN9cc59ZzzzkDLFQFhKzb6rkXHu8VvUQjkwmOJ3sE/C1td/IISLw==","shasum":"248a67acf90ba87f0dad43ab6917e3377c8f89e8","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.11.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.11.tgz_1507635093680_0.09414065349847078"},"directories":{}},"0.0.12":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.12","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.12","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-cH3GLFqTtejeS5L+w7ykPW5+UCxs8/3Hv57i18hdaBJe0GoiSxeHlQkKT9soK4dpNpXxI32g6WD5T/s8XESQTg==","shasum":"03cd9dc4b898832bb383497fc979e8d8816aab93","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.12.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.12.tgz_1507645284270_0.9134631415363401"},"directories":{}},"0.0.13":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.13","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.13","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-n0vR/zpxn/uhXtQ2YU890gsQxfiMLHA/lahpatpwX8rm32fEEMqgJIgU2n1QrYg6ByaQaaRHuPf8Vs0qw94R2g==","shasum":"c7d02e5d41d6c83dde4c7bc0bfdea3bd2cb5cd25","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.13.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.13.tgz_1507870676403_0.886019934900105"},"directories":{}},"0.0.14":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.14","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},":autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.14","_npmVersion":"5.5.1","_nodeVersion":"8.7.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-lUDRiqnEfweyiG5VaW8VWAtIHRUirDta2/Avc+z3DkoXLbaiZnvqofnHQFrglpehjksWClQJPa73qOfSuIJgWQ==","shasum":"ce14ed8ef3023c3a96a60bcad94897e27e8139f2","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.14.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.14.tgz_1509255147777_0.7395709331613034"},"directories":{}},"0.0.15":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.15","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.15","_npmVersion":"5.5.1","_nodeVersion":"8.7.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-bYKPA8EfEks63PJ9onLEp3STzoIoP+d2Z5wOj0NyyhSBuvopOcv/YkXZD4T0o+dvIyohLyMr7NrWG4JYqpsEKQ==","shasum":"09f4e69e7daf13b2e26d1bfef4e7067310dc8327","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.15.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.15.tgz_1509255740567_0.7648262765724212"},"directories":{}},"0.0.16":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.16","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.16","_npmVersion":"5.5.1","_nodeVersion":"8.7.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-EcqCtOLfGXDLnjz+X+99AKgBAln0QCjXpJodgLvYExuRIpNTs+Y6e0RUaH3Bpygxgj0N1+ovlr/mYvs6Dl5ycQ==","shasum":"7091e278e01f1759378668dd3a1a72d143b7b88f","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.16.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.16.tgz_1509474262938_0.06874840566888452"},"directories":{}},"0.0.17":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.17","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.17","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-GbvQD1L8LEnUJdZlz2PF9h++Zg64icYmjHfG+Mo4tk5MWEHpoU5mKdzthAwfZ3Om6nKvJiDftW1Bv0UEGPCcGw==","shasum":"5c24951fe0e93431618fddadf0232dec6c8ed032","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.17.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.17.tgz_1510307801964_0.9738916056230664"},"directories":{}},"0.0.18":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.18","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"chore(deps):"},"semanticPrefixFix":{"description":"Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles","semanticPrefix":"fix(deps):"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others","dependencies":{"extends":":semanticPrefixFix"},"devDependencies":{"extends":":semanticPrefixChore"},"optionalDependencies":{"extends":":semanticPrefixChore"},"peerDependencies":{"extends":":semanticPrefixChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.18","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-3I4JJc19/YweewBvZEMjArWRvq7+C6ydiacYewQEhys95QNwYuDwgxXpw+gxRRCNhCBDZp6oefw4gc8gMPITrg==","shasum":"e25bc3bcc4b786a2612feb37b04b0df89302e0e7","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.18.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.18.tgz_1510308420962_0.49720569467172027"},"directories":{}},"0.0.19":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.19","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeChore"]},"semanticCommitTypeChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"chore"},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeFix"]},"semanticCommitTypeFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"fix"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitTypeFix"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"}},"semanticCommitChoreAll":{"description":"If semantic commits detected, use semantic commit type <code>chore</code> for all","dependencies":{"extends":":semanticCommitTypeChore"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"},"pin":{"extends":":semanticCommitTypeChore"},"digest":{"extends":":semanticCommitTypeChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticScope":{"description":"Use semantic scope {{arg1}} for all commits and PR titles","semanticScope":"{{arg1}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.19","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-Ym4NqESVI8EqtZHnNaDxiKrTl4Mzt+3ju2CKCUQ5IoUfkzTfGK7bfJt5zwaL/Zn+X2WjX23b6HZdT4XXYNMO4w==","shasum":"86c32920c0a693ee22cfe9a1101f4673c30ec5c3","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.19.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.19.tgz_1511514596850_0.9910841509699821"},"directories":{}},"0.0.20":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.20","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeChore"]},"semanticCommitTypeChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"chore"},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeFix"]},"semanticCommitTypeFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"fix"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitTypeFix"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"}},"semanticCommitChoreAll":{"description":"If semantic commits detected, use semantic commit type <code>chore</code> for all","dependencies":{"extends":":semanticCommitTypeChore"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"},"pin":{"extends":":semanticCommitTypeChore"},"digest":{"extends":":semanticCommitTypeChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticCommitScope":{"description":"Use semantic scope {{arg1}} for all commits and PR titles","semanticCommitScope":"{{arg1}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.20","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-q852RbXsiqmT+jCplmf+awnSM+uRd7KKs2wUExtK8xwUCUC4wXSrg2Bv4MGzZHawqzthjEY+IKLIVggEmf9Z/g==","shasum":"f2a135122c383647e8ba9f64cb4a73787b0b75f7","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.20.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.20.tgz_1511514847931_0.17247018171474338"},"directories":{}},"0.0.21":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.21","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeChore"]},"semanticCommitTypeChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"chore"},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitTypeFix"]},"semanticCommitTypeFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"fix"},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitTypeFix"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"}},"semanticCommitChoreAll":{"description":"If semantic commits detected, use semantic commit type <code>chore</code> for all","dependencies":{"extends":":semanticCommitTypeChore"},"devDependencies":{"extends":":semanticCommitTypeChore"},"optionalDependencies":{"extends":":semanticCommitTypeChore"},"peerDependencies":{"extends":":semanticCommitTypeChore"},"pin":{"extends":":semanticCommitTypeChore"},"digest":{"extends":":semanticCommitTypeChore"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticCommitScope":{"description":"Use semantic scope {{arg0}} for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.21","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-87h0xOUdrPcpbbPmu2vHpksQ58aMSIxqRpTb82LABjrn/eRALWnqNhFkSHn/YwoCer8SlWzHcgOe45kJOPcrsQ==","shasum":"d979bf0162fe153ff29a31cfed7c2f2bcc3c7099","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.21.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.21.tgz_1511514936423_0.6281631183810532"},"directories":{}},"0.0.22":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.22","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}}))"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}}))"},"peerDependencies":{"extends":":semanticCommitType({{arg0}}))"},"pin":{"extends":":semanticCommitType({{arg0}}))"},"digest":{"extends":":semanticCommitType({{arg0}}))"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticCommitScope":{"description":"Use semantic scope {{arg0}} for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.22","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-yrZdri+20wQbgerasgxT0qYMjy/MXpLUr2GUxNH0MsS7poyRYeSF6rBldePBGAAXVWJIeHDsolo6NYF5JnWkyg==","shasum":"f6367964c4dcebcc08c2ed28e38a737e407ac6f0","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.22.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.22.tgz_1511515359170_0.9668566612526774"},"directories":{}},"0.0.23":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.23","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.23","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-nFfK5Bfm2oijzIQZ7KOELBQWk/sdwq6HpFZ8Jilao5gHOVS1sUgW/umIdVcormGZPuFThhiGI2Ne/wkRtF6lBQ==","shasum":"9e0627096bfa27510737d42b93fec49c2dde06c1","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.23.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.23.tgz_1511515530545_0.9332773205824196"},"directories":{}},"0.0.24":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.24","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time master has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.24","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-XM7Gtk7Po7UDeBaAlFlDUXeMtUnTBUW10q/TnrDp9WtGcb+dn+UIF/hZ6Ll+i3gFu8c0/R4oLP29M48wwSX2ig==","shasum":"37c1042eae0156f2557239ee1a52ff32d94185f1","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.24.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.24.tgz_1511515881792_0.660327049670741"},"directories":{}},"0.0.25":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.25","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","assignees":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}}"]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.25","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-nrdOuTWoAewlABvagnQ1xxw4PObWwxhc5I8zjDav3z0M/xTu51/L08PKMWLFMm349KSlyAesc4DqNulkZrnXcQ==","shasum":"72a94e5aae10262e29b123ed7faf5a4eb5858f04","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.25.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.25.tgz_1511516366145_0.1431664100382477"},"directories":{}},"0.0.26":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.26","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","assignees":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.26","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-5Kw6oskbYNDtKUcQs5BROCYzW07sKYEmo1xgEAXdyXSrd7u3JrXMTKs/Dxp0UlBML9CJ5+uO+7Ae5xPWbcj+iQ==","shasum":"921968abebe5f5867ffbd5b02e70ceb572ea253b","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.26.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.26.tgz_1511516860808_0.3088714680634439"},"directories":{}},"0.0.27":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.27","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch or minor upgrades if they pass tests","minor":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.27","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-rCVnDFthrTDG3K2SmN9Mc8uEVy4tw+3xodrTkji02w4LoM8ielJb/liBBUUOxURuPg/6eDBvPUXTASlnTp1luA==","shasum":"3c6185ca2bfed8144491af1bf87dd0ee22f166ed","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.27.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.27.tgz_1511518680136_0.3493485867511481"},"directories":{}},"0.0.28":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.28","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.28","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-l7+YaPpZlCMpPksa6wjaQXLpoYSXvxZGWmSByI1u4XRVVAh8rVn5ms06EyHtucamxQG4/SuvZm9ns7QLTdcdTw==","shasum":"249540ae399607337a9cdadac71ced16d2e4db6b","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.28.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.28.tgz_1512538905648_0.31103554810397327"},"directories":{}},"0.0.29":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.0.29","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignoreNodeModules":false},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic commits for commit messages and PR titles","semanticCommits":true},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.0.29","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-tf0piLI6/B0IRN0fhBzNIxmjkMfeEBT2ZseIJqGHSu37zEAHBBPaHIuiYJsRBLuGnLIXSWBMO+1VkCbrTc0tVw==","shasum":"ea6d3183a3786e43d08b78974f2524bb4ad9fab4","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.0.29.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.0.29.tgz_1512539212239_0.27989081502892077"},"directories":{}},"0.1.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.0","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic commits for commit messages and PR titles","semanticCommits":true},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-ostHeUh9Az7C1Cz4EbI0yTrqfrWVTWUdMycwjkmeYUBdM1risbruHtF7D20fs7Qeiftt3UJQ0QuyNpUMlYEJYw==","shasum":"d75ec73e5f0e9da2226b271751c0f6430776227c","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.0.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.0.tgz_1513609513936_0.06578921806067228"},"directories":{}},"0.1.1":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.1","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","commitBody":"[skip ci]"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic commits for commit messages and PR titles","semanticCommits":true},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-GemK85X3/TfNxuKg0UsOi1CgF1AVPiw90IYGzLhlCHNc5S4t0pFwr0Ej8BT0zvHMkuM+Gbce3jm7LjPPAbvSDQ==","shasum":"730d4c91e3c586ac6ec97ee6cc0a111d9ef54ea2","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.1.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.1.tgz_1514230973318_0.8551024752669036"},"directories":{}},"0.1.2":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.2","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","commitBody":"[skip ci]"},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic commits for commit messages and PR titles","semanticCommits":true},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.2","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-e1QKykUVWZ84e7X8XNpNnjdB3X4cD3ewSiEQJcm/Xl6JB8jjdvGZ9tYmS2TRDSLzxLodWtYwxE8GbP0NDxlv2Q==","shasum":"00b525580cc06412c71dfcd31d426f832423d3fe","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.2.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.2.tgz_1514231749043_0.5790680181235075"},"directories":{}},"0.1.3":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.3","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic commits for commit messages and PR titles","semanticCommits":true},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.3","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-iY/c/joOiNXDMTivxyCp+rxNX9A66Re68JB1UCLIfVy38icQ+xtJH9900+Pc8Hkw0jUhFbEIhL8CeJOStKCwew==","shasum":"e65346e669391fbe1ddd0e1d073e65665b383fb7","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.3.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.3.tgz_1514232114140_0.0811772639863193"},"directories":{}},"0.1.4":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.4","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.4","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-1il3a5FX9mI9XtoD01L3PmKANX9LzX7piroUu3pL0rDmIfHz8GFgA6qtVFybTk6nEp+YMoBq7mec4xPY8ajCZQ==","shasum":"6e63b461babfc2f271fe4618fee3fe0a35dd55e0","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.4.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.4.tgz_1514436493232_0.5060964282602072"},"directories":{}},"0.1.5":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.5","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.5","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-gzjESRWJQie2D64P+A/f8FJGaDaSCe4lgism9N3jgwKW1+l/cppgHydrLZ+L5FLHMFu8ar6c0vJ5H70wPsRG2w==","shasum":"98d296771c252d26fdcad5fa61ee51ff955a124f","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.5.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.5.tgz_1514436871430_0.290228886064142"},"directories":{}},"0.1.6":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.6","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.6","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-mh7/yItjZsE1anYmFv7lqVz+cDN3cWg9ebUkb5zZMIIPFvcgbA8DaSxU3a5k5uf91Pu/Jd8y3WKEXVRNqUPAlw==","shasum":"b56968becce3b70af89ac72f3b3ebcbbb8498d0e","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.6.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.6.tgz_1514556905811_0.967088574776426"},"directories":{}},"0.1.7":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.7","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.7","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-xMiyWEzBLE2wxjXJStKgzpddxuAKS0lui3U0HfsRHkDtReGGiPnlUMbiFaI4IYeWrlTBKz7otTndQkQxlJLn5A==","shasum":"cd42a98dfd918d75cf2f1cacdde4caf2cfec59be","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.7.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.7.tgz_1514561004941_0.6839793352410197"},"directories":{}},"0.1.8":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.8","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore node_modules, bower_components, and __tests__ directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchprefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.8","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-+PSdUvozlnIVNsCUCIEkf9/RJke5W+vmUF1M9bIG+cKTt8YO7rwgGHq/1giQtVO/yHBj/qdotWOuG6VVCfR/0w==","shasum":"16e5972c0e10055b2d9705c6063fe580bc4ef355","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.8.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.8.tgz_1515415718170_0.8846055143512785"},"directories":{}},"0.1.9":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.9","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore node_modules, bower_components, and __tests__ directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.9","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-gTkhgoE/IKzVqdzyquCSoL5H2OLM+Ik/ILDxyySNSvD88MIKthhY07qhHQAkGLKZ0nNbLqLFiK3xSM/w239ncA==","shasum":"837d635f937986290b49b7f4b462e047389667dd","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.9.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.9.tgz_1515480427901_0.31603955128230155"},"directories":{}},"0.1.10":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.10","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.10","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-W23bK3Y+yGKnvl7jDhDHsQj7mL7iGjonxDtA4Cc8AnRmPYk9tZQaBJ5SlpfOaawXfGqBOnoigqfl4Oviu35MJA==","shasum":"eaffb271ee5a33dde7810a82f4b711d9e4a84469","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.10.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.10.tgz_1515651101189_0.936929679941386"},"directories":{}},"0.1.11":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.11","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.11","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-Crt3eMh8GutGLHPEwop+JleLL492PmXbvl3WvrPAJIPTAhLhNlAAx8BO3rjmiSODOcBb7LIhrJMqKc53doZeOA==","shasum":"c219207514ede5c5bcc534b7bdb3ec962014fe04","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.11.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.11.tgz_1515674145692_0.6664736494421959"},"directories":{}},"0.1.12":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.12","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.12","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-whShKijEOihKKR2lojekyQXLcy6kBM5Sqf9ehNCaTdFu/fMAxGwCGex895KFXQDqxFUhCAKrKz3viOpAdP3mSA==","shasum":"61d74ad1475d270ce612cbd7075b0f92fe51c296","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.12.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.12.tgz_1515738904793_0.7155707492493093"},"directories":{}},"0.1.13":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.13","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.13","_npmVersion":"5.6.0","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-7pLx8LDHN0IIP7Q2wE0m1+nAquv3ucwjY7kRuYyJAxUNghGsmDEzTs+6Yx+EN3p84VXxllZPSeCM+bcdHs2pYA==","shasum":"cf2b9e16a334ad2f4e67ac73102b9f1ff6a5fc2b","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.13.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.13.tgz_1516803589408_0.913751102052629"},"directories":{}},"0.1.14":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.14","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.14","_npmVersion":"5.6.0","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-kFXJ9BZrzp5DPOEmizHvy1Zow8Czkq7c1mSyjfKKyziF3wZDFepXTEq7zzoFv3j5yHGDER0RYPwDG8AafOD6HA==","shasum":"bd14865fd6f50a9d8c58f15429cda8ea2fa3c49d","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.14.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.14.tgz_1517149176766_0.15657979459501803"},"directories":{}},"0.1.15":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.1.15","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.1.15","_npmVersion":"5.6.0","_nodeVersion":"8.9.0","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-aNU3mz9DhpWbUqTtXNMyFh3/puHl/JB3m7nMoFcO2wURpdD0rBOkvyR+KtyuuzUZvFyDu76E9/BZU6YH5xPrWQ==","shasum":"502f760e0e1ea14cd14a735b0f65686bd58e26c7","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.1.15.tgz"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default-0.1.15.tgz_1517310769344_0.030151891289278865"},"directories":{}},"0.2.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.2.0","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.2.0","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-N8IF4aEKmW6YLxF5BdBMFzSAp98dMci8OXPPcDx3QEWM2ZMxPM82kANfYbi7EEXJYR67QmIghpz6obhTPWpvfA==","shasum":"e98203b23447d984c2684de82b2f3cc28fd5dbee","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.2.0.tgz","fileCount":2,"unpackedSize":13497},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.2.0_1520144730915_0.7393420938734665"}},"0.3.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.3.0","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.3.0","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-BEInf6PgzDUpybPnp8D0yOjhbdMs5HQkmAQZ4/c/benG/zMEeiJR5ESRAi135taXZrlbEMiBl6AvP3RHEFe8QQ==","shasum":"b4276b190af175f2a15747a13d5b8c116ad1c158","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.3.0.tgz","fileCount":2,"unpackedSize":13659},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.3.0_1521711805734_0.2421189624993334"}},"0.4.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.4.0","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","dependencies":{"extends":":preserveSemverRanges"},"devDependencies":{"extends":":pinVersions"},"optionalDependencies":{"extends":":preserveSemverRanges"},"peerDependencies":{"extends":":preserveSemverRanges"}},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","dependencies":{"extends":":semanticCommitType(fix)"},"devDependencies":{"extends":":semanticCommitType(chore)"},"optionalDependencies":{"extends":":semanticCommitType(chore)"},"peerDependencies":{"extends":":semanticCommitType(chore)"}},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","dependencies":{"extends":":semanticCommitType({{arg0}})"},"devDependencies":{"extends":":semanticCommitType({{arg0}})"},"optionalDependencies":{"extends":":semanticCommitType({{arg0}})"},"peerDependencies":{"extends":":semanticCommitType({{arg0}})"},"pin":{"extends":":semanticCommitType({{arg0}})"},"digest":{"extends":":semanticCommitType({{arg0}})"}},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.4.0","_npmVersion":"5.8.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-+cg7b/yHO9SWpYkeIcj2h3rNf3+xAYo8s+aEx0lhdPpllfCqqZM+UjD0HSFydLHwjn5KQTZk9zWYWJ8t2UKJkQ==","shasum":"8e8b732418d94cf75415771a3a7df3e43970e7a9","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.4.0.tgz","fileCount":2,"unpackedSize":13786},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.4.0_1523360141840_0.980941723979972"}},"0.5.0":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.5.0","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinAllExceptPeerDependencies":{"description":"Pin dependency versions for all except <code>peerDependencies</code>","packageRules":[{"packagePatterns":["*"],"pinVersions":true},{"depTypeList":["peerDependencies"],"pinVersions":false}]},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","packageRules":[{"packagePatterns":["*"],"pinVersions":false},{"depTypeList":["devDependencies"],"pinVersions":true}]},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"chore"},{"depTypeList":["dependencies"],"semanticCommitType":"fix"}]},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","packageRules":[{"packagePattern":["*"],"semanticCommitType":"{{arg0}}"}]},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.5.0","_npmVersion":"5.8.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-TRI9jlV3Ap/GN/EIPq8Uuu0Ygte9+04Fr8Chp/J4sp+NfSmx2fdhh2j5+ZyYz0mICju4cK2en6C1zQgVFihD8w==","shasum":"75c20a21c4da631b3ef6f53553b3173f1a95f161","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.5.0.tgz","fileCount":2,"unpackedSize":13569},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.5.0_1523360306881_0.9727815590527951"}},"0.5.1":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.5.1","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinAllExceptPeerDependencies":{"description":"Pin dependency versions for all except <code>peerDependencies</code>","packageRules":[{"packagePatterns":["*"],"pinVersions":true},{"depTypeList":["peerDependencies"],"pinVersions":false}]},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","packageRules":[{"packagePatterns":["*"],"pinVersions":false},{"depTypeList":["devDependencies"],"pinVersions":true}]},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"chore"},{"depTypeList":["dependencies"],"semanticCommitType":"fix"}]},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"{{arg0}}"}]},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","pathRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.5.1","_npmVersion":"5.8.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-PVqxELHi8+COuVkdpwuo0XguvugVaAPq7QbAe2WtVqM+MJw8mh0TbOGQi//lPGJR6FhvAAqCmKkfYN6f54z1gw==","shasum":"8fba9566837de6d8f555641ed1101d498b2714ef","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.5.1.tgz","fileCount":2,"unpackedSize":13570},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.5.1_1523362258735_0.5356455472815216"}},"0.5.2":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.5.2","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinAllExceptPeerDependencies":{"description":"Pin dependency versions for all except <code>peerDependencies</code>","packageRules":[{"packagePatterns":["*"],"pinVersions":true},{"depTypeList":["peerDependencies"],"pinVersions":false}]},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","packageRules":[{"packagePatterns":["*"],"pinVersions":false},{"depTypeList":["devDependencies"],"pinVersions":true}]},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"chore"},{"depTypeList":["dependencies"],"semanticCommitType":"fix"}]},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"{{arg0}}"}]},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","packageRules":[{"paths":["{{arg0}}"],"extends":[":semanticCommitTypeAll({{arg1}})"]}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.5.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-gUhztm6ojcUu2DWR/beLEsGN3UW6g1lvexnqGLiC69/Xzfio0ChnLcX01uRYkbQs37KIRoP4bj9ZylBq2b0BsA==","shasum":"89b1b17de9dc1be920cb58cde4697498f5b045ca","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.5.2.tgz","fileCount":2,"unpackedSize":13573,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5HS/CRA9TVsSAnZWagAA6rcQAInLv/YwcmEQHyVXQ3ih\nxl+OzGmt4jfvBnXhUUT9KW1Vyp0Z9NNNPrtFgFdRrc0mv8rgEuaxpXO7p7Xr\nuPwbbydQtsOC9P6x8CJ0xojQ+G+CshkMA8UQbgkISIG3SSZUKrofM3cz4jdN\ntNDCqHBBdZHsxMjQCBTztlI7fdaijTC26yy2PUMTjqv2qTxm6Q+29ky5p2T1\nUwPjbPhSsqlUc6H5F6G1N/mcx3KaLljQ1JoqRo9M79YnLKLjr8om14zKROsc\nPerFOyRjxJpWMICX8bOP9svzb2cGZESt+oSlsSNZSiiRqYvtukUtEzV7HrIG\nPpPoF9gRLo32RpduubnrPc+MwkvmaHmygllJc0qS4yKFm/aqehQFb8FIAdMf\ns3dFJUEgwp68Z0cwuxLeUTi2Kj9tZZ09ZmgggDJBn9NOvNQDXogP2GwybKRq\nMk3tlRVD6reQDDMjV7KY/TmZjhHtlz5DyKA/A11skL7ng9csJFzFKvICwPjp\nkcu9ipIhDSWm5vIJZ2TnyFfKq2vZ2GHaJOMpkf787Y2tBClgKmmxTS/0SN3K\nnwgzqXNDVJXa/jTeg6cVEFMvI6DdrQ28xEFmJrGdceVtvCrFlgg5qpznpZuT\nL7Y+uicTYAEUm/lSvZEpvOP8/WfHgD4r3mcX+8ELzWsu0DvaSMov5ZuykME1\nLUy7\r\n=/h5f\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.5.2_1524921533793_0.5969632249741614"}},"0.5.3":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.5.3","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinAllExceptPeerDependencies":{"description":"Pin dependency versions for all except <code>peerDependencies</code>","packageRules":[{"packagePatterns":["*"],"pinVersions":true},{"depTypeList":["peerDependencies"],"pinVersions":false}]},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","packageRules":[{"packagePatterns":["*"],"pinVersions":false},{"depTypeList":["devDependencies"],"pinVersions":true}]},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","peerDependencies":{"enabled":false}},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"chore"},{"depTypeList":["dependencies"],"semanticCommitType":"fix"}]},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"{{arg0}}"}]},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","versionStrategy":"widen"},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","packageRules":[{"paths":["{{arg0}}"],"semanticCommitType":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.5.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-6kD18l4h88VCTRFyEw6QEm+N0DgHLqTmipOAuOssAjzObpXg2c2qZD7Q3sJeo1Z2Lgwk/wKNts5yzDjJbmhLqA==","shasum":"0375a5d0ab3f29d91afd2f0955c41bbeae9a2bef","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.5.3.tgz","fileCount":2,"unpackedSize":13534,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5HdtCRA9TVsSAnZWagAAKq0P/2wRIlJ/ne5QUtSW8iOn\nlFmB9Sm4gg0K4PyP0oDmCsXo9awpJhOrvHGZqYy/zaSVUi/zNn+9KBEDjl1q\nXDjjNZPkVHQUI7HLsS4w7ZsYLde4yHkrnKNlH2vApx8oJxjrZpKfzTs7Veu0\nMNbjQmg0PxHehbqOWt+pea5I0f/IVP4nc4PYcXbOjbxUb7d9mKbGyUHNy/vD\nUOF9R7GxTNzyo2ee3ciLpS1nZp0rnn9eeqkrQUkYIebPgeBS2iOhSdpdMLTu\niVVkjAUxcFINS/o+VbP+UqINnm4py6IGuz886SDbSjvekqaQ2o8fagMSq/76\nuusdbivnX+48OKI4Fldg5X4gx4xp/8H5MgZRqbBKXi2u9ZJPkBFbff/OJbxa\n6xDwp2J/VPdJyLoVvomUuCOJznUK9LdB7OxPO/hnRfQRITXRJSBvR4wm+hvR\n06ZD8zfx3P61aILi3XxiXbc3PSZJ59NCAtXBeQCxTAVb2OT6tjHRUeeACrsB\nqTmr8EsT92bCMWpfaUuz1wRWmddUE66WWqjBXiA4gWjSAj5OiInqyIN/Z+bo\nKaPlkpGj/x9fkwyEr2nF+7lJspTXRKZsZVD1JwQAx8SvWJzqT2Wu5zb73GoD\nxx3avIzzNCJAj9nD5L6QPCqTQkFxyggbnmn4HYNc1gI7ADUVOG9rIINU+tCE\ndlbV\r\n=/Xzy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.5.3_1524922220368_0.20521211526933802"}},"0.5.4":{"name":"renovate-config-default","description":"Default preset configs for Renovate","author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"license":"MIT","homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"version":"0.5.4","renovate-config":{"enableRenovate":{"description":"Enable renovate","enabled":true},"disableRenovate":{"description":"Disable renovate","enabled":false},"ignoreModulesAndTests":{"description":"Ignore `node_modules`, `bower_components`, and various test/tests directories","ignorePaths":["**/node_modules/**","**/bower_components/**","**/examples/**","**/__tests__/**","**/test/**","**/tests/**"]},"includeNodeModules":{"description":"Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.","ignorePaths":[]},"pinVersions":{"description":"Use version pinning (maintain a single version only and not semver ranges)","pinVersions":true},"preserveSemverRanges":{"description":"Preserve (but continue to upgrade) any existing semver ranges","pinVersions":false},"pinAllExceptPeerDependencies":{"description":"Pin dependency versions for all except <code>peerDependencies</code>","packageRules":[{"packagePatterns":["*"],"pinVersions":true},{"depTypeList":["peerDependencies"],"pinVersions":false}]},"pinOnlyDevDependencies":{"description":"Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others","packageRules":[{"packagePatterns":["*"],"pinVersions":false},{"depTypeList":["devDependencies"],"pinVersions":true}]},"autodetectPinVersions":{"description":"Autodetect whether to pin dependencies or maintain ranges","pinVersions":null},"separateMajorMinor":{"description":"Separate major versions of dependencies into individual branches/PRs","separateMajorMinor":true},"separateMinorPatch":{"description":"Separate patch and minor releases of dependencies into separate PRs","separateMinorPatch":true},"combinePatchMinorReleases":{"description":"Combine any patch and minor upgrades together into same branch/PR","separateMinorPatch":false},"renovatePrefix":{"description":"Use <code>renovate/</code> as prefix for all branch names","branchPrefix":"renovate/"},"semanticCommitType":{"description":"Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles","semanticCommitType":"{{arg0}}"},"semanticPrefixChore":{"description":"Use <code>chore</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(chore)"]},"semanticPrefixFix":{"description":"Use <code>fix</code> as semantic commit type for commit messages and PR titles","extends":[":semanticCommitType(fix)"]},"disablePeerDependencies":{"description":"Do not renovate <code>peerDependencies</code> versions/ranges","packageRules":[{"depTypeList":["peerDependencies"],"enabled":false}]},"semanticPrefixFixDepsChoreOthers":{"description":"If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"chore"},{"depTypeList":["dependencies"],"semanticCommitType":"fix"}]},"semanticCommitTypeAll":{"description":"If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all","packageRules":[{"packagePatterns":["*"],"semanticCommitType":"{{arg0}}"}]},"rebaseStalePrs":{"description":"Rebase existing PRs any time the base branch has been updated","rebaseStalePrs":true},"unpublishSafe":{"description":"Set a status check to warn when upgrades <  24 hours old might get unpublished","unpublishSafe":true},"unpublishSafeDisabled":{"description":"Create branches/PRs for dependency upgrades as soon as they're available","unpublishSafe":false},"prImmediately":{"description":"Raise PRs immediately (after branch is created)","prCreation":"immediate"},"prNotPending":{"description":"Wait until branch tests have passed or failed before creating the PR","prCreation":"not-pending"},"prHourlyLimitNone":{"description":"Removes rate limit for PR creation per hour","prHourlyLimit":0},"prHourlyLimit1":{"description":"Rate limit PR creation to a maximum of one per hour","prHourlyLimit":1},"prHourlyLimit2":{"description":"Rate limit PR creation to a maximum of two per hour","prHourlyLimit":2},"prHourlyLimit4":{"description":"Rate limit PR creation to a maximum of four per hour","prHourlyLimit":4},"prConcurrentLimit10":{"description":"Limit to maximum 10 concurrent Renovate PRs at any time","prConcurrentLimit":10},"prConcurrentLimit20":{"description":"Limit to maximum 20 concurrent Renovate PRs at any time","prConcurrentLimit":20},"automergeDisabled":{"description":"Disable automerging feature - wait for humans to merge all PRs","automerge":false},"automergeDigest":{"description":"Automerge digest upgrades if they pass tests","digest":{"automerge":true}},"automergePatch":{"description":"Automerge patch upgrades if they pass tests","patch":{"automerge":true}},"automergeMinor":{"description":"Automerge patch and minor upgrades if they pass tests","minor":{"automerge":true},"patch":{"automerge":true}},"automergeMajor":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeAll":{"description":"Automerge all upgrades (inluding major) if they pass tests","automerge":true},"automergeBranchMergeCommit":{"description":"If automerging, perform a merge-commit on branch (no PR)","automergeType":"branch-merge-commit"},"automergeBranchPush":{"description":"If automerging, push the new commit directly to base branch (no PR)","automergeType":"branch-push"},"automergePr":{"description":"Raise a PR first before any automerging","automergeType":"pr"},"automergeRequireAllStatusChecks":{"description":"Require all status checks to pass before any automerging","requiredStatusChecks":[]},"skipStatusChecks":{"description":"Skip status checks and automerge right away","requiredStatusChecks":null},"maintainLockFilesDisabled":{"description":"Update existing lock files only when <code>package.json</code> is modified","lockFileMaintenance":{"enabled":false}},"pinDigestsDisabled":{"description":"Disable pinning of docker dependency digests","pinDigests":false},"maintainLockFilesWeekly":{"description":"Run lock file maintenance (updates) early Monday mornings","lockFileMaintenance":{"enabled":true,"extends":"schedule:weekly"}},"maintainLockFilesMonthly":{"description":"Run lock file maintenance (updates) on the first day of each month","lockFileMaintenance":{"enabled":true,"extends":"schedule:monthly"}},"ignoreUnstable":{"description":"Upgrade to unstable versions only if the existing version is unstable","ignoreUnstable":true},"respectLatest":{"description":"Upgrade versions up to the \"latest\" tag in npm registry","respectLatest":true},"updateNotScheduled":{"description":"Keep existing branches updated even when not scheduled","updateNotScheduled":true},"noUnscheduledUpdates":{"description":"Make no updates to branches when not scheduled","updateNotScheduled":false},"automergeLinters":{"description":"Update lint packages automatically if tests pass","packageRules":[{"extends":["packages:linters"],"automerge":true}]},"doNotPinPackage":{"description":"Disable version pinning for <code>{{arg0}}</code>","packageRules":[{"packageNames":["{{arg0}}"],"pinVersions":false}]},"pinSkipCi":{"description":"Add [skip ci] to commit message body whenever pinning","pin":{"commitBody":"[skip ci]"}},"gitSignOff":{"description":"Append git Signed-off-by signature to git commits.","commitBody":"Signed-off-by: {{{gitAuthor}}}"},"npm":{"description":"Keep package.json npm dependencies updated","javascript":{"enabled":true}},"onlyNpm":{"description":"Renovate only npm dependencies","docker":{"enabled":false},"meteor":{"enabled":false}},"docker":{"description":"Keep Dockerfile FROM sources updated","docker":{"enabled":true}},"meteor":{"description":"Keep Meteor Npm.depends packages updated","meteor":{"enabled":true}},"group":{"description":"Group {{arg1}} packages into same branch/PR","packageRules":[{"extends":["{{arg0}}"],"groupName":"{{arg1}}"}]},"label":{"description":"Apply label <code>{{arg0}}</code> to PRs","labels":["{{arg0}}"]},"labels":{"description":"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs","labels":["{{arg0}}","{{arg1}}"]},"assignee":{"description":"Assign PRs to <code>{{arg0}}</code>","assignees":["{{arg0}}"]},"reviewer":{"description":"Add <code>{{arg0}}</code> as reviewer for PRs","reviewers":["{{arg0}}"]},"assignAndReview":{"description":"Set <code>{{arg0}}</code> as assignee and reviewer of PRs","extends":[":assignee({{arg0}})",":reviewer({{arg0}})"]},"semanticCommits":{"description":"Use semantic prefixes for commit messages and PR titles","semanticCommits":true},"semanticCommitsDisabled":{"description":"Disable semantic prefixes for commit messages and PR titles","semanticCommits":false},"disableLockFiles":{"description":"Disable lock file updates","updateLockFiles":false},"semanticCommitScope":{"description":"Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles","semanticCommitScope":"{{arg0}}"},"semanticCommitScopeDisabled":{"description":"Disable semantic commit scope for all commits and PR titles","semanticCommitScope":null},"widenPeerDependencies":{"description":"Always widen peerDependencies semver ranges when updating, instead of replacing","packageRules":[{"depTypeList":["peerDependencies"],"versionStrategy":"widen"}]},"timezone":{"description":"Evaluate schedules according to timezone {{arg0}}","timezone":"{{arg0}}"},"pathSemanticCommitType":{"description":"Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}","packageRules":[{"paths":["{{arg0}}"],"semanticCommitType":"{{arg1}}"}]},"base":{"description":"deprecated alias for config:base","extends":["config:base"]},"app":{"description":"deprecated alias for config:js-app","extends":["config:js-app"]},"library":{"description":"deprecated alias for config:js-lib","extends":["config:js-lib"]}},"_id":"renovate-config-default@0.5.4","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"rarkins","email":"rhys@keylocation.sg"},"dist":{"integrity":"sha512-Jx03CdxJqREjeFC4jNLl6sWYX/HnURIiKVhwwbmdq++Nt7REdTrVW4rkz3l64un4flVBzmqsb5lfYPhHgImDWg==","shasum":"fafccda0173210173f56989fe4ac035774614c41","tarball":"https://registry.npmjs.org/renovate-config-default/-/renovate-config-default-0.5.4.tgz","fileCount":2,"unpackedSize":13702,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5fr9CRA9TVsSAnZWagAAVD8P/0Q9PNfyzW60yneG4OAG\nTAWtHF+9G12V2WOAr7oA/XfmgIhT8NlYUc+K7YIMo2YFlpHhf389mYZw89br\n+mmUuzYOaNhmzDbTx0XMiPCW4VVuJ2MlMombSF58sfnrUuiTofhd29qHkKSC\nsNhZEIjParboI12gOg9luW4eGw18pufb5LwMtnG+vcddgoCgcyr3SdmgP6Bp\n4Yze72+mjFK38z4cN7yJqgq7/BKsYf5HfT4ySsqeQ9ENdPO3QBfb056Icjs7\nBVGETuL0Vwmc8N6N2dL8dgFo0qcehB1BwVid/AHhLfEx4wEnqQQ7mk0APrrm\nw/eIWow2ke7JIsobNlus+nyQBgzoNTr75p+QvQb6akneTvhFdjlf0v7yaSEb\nZOBitnZ4oTdFZ0OfgmGWhuTmzGdI9n1HX5pwYJXndRdf3zRq+hHKJJdcbJJD\nPdVRrcaCdPnbGWeNEf1/p91xE2+fIP0kOfzNQLkOj4tln96QnXxHNm+Y57OY\nU84JEYD5UaRvIEbp/5Zae3w+1Gh60aatbJ08T0xQgcFhIx2WrDMLmx0Iwi0A\nZg5M9FHg6iG8ZjY17L5nkVngx456dCRt3so2fvKnBrc4dLExxt6iMoePUQs5\n5PihLxEHePebscEgvMeBlxKQNmzAEHGHozj6afUU+l8SZv84Zi0eQe8hAgN1\n9wBU\r\n=7smk\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/renovate-config-default_0.5.4_1525021437125_0.8307950624547322"}}},"readme":"# default presets\n\nThis directory contains default presets for Renovate. Any preset defined here can be referenced with or without the `default` prefix, e.g. `\"extends\": [\":base\"]` or `\"extends\": [\"default:base\"]`.\n","maintainers":[{"name":"rarkins","email":"rhys@keylocation.sg"}],"time":{"modified":"2018-04-29T17:04:00.060Z","created":"2017-08-16T11:52:48.679Z","0.0.0":"2017-08-16T11:52:48.679Z","0.0.1":"2017-08-16T11:53:42.816Z","0.0.2":"2017-08-18T07:34:52.514Z","0.0.3":"2017-08-18T08:52:17.834Z","0.0.4":"2017-08-24T09:09:49.075Z","0.0.5":"2017-09-14T07:35:35.511Z","0.0.6":"2017-09-26T19:23:38.373Z","0.0.7":"2017-09-28T08:41:39.366Z","0.0.8":"2017-10-10T04:46:25.882Z","0.0.9":"2017-10-10T08:30:37.601Z","0.0.10":"2017-10-10T10:28:03.015Z","0.0.11":"2017-10-10T11:31:34.659Z","0.0.12":"2017-10-10T14:21:25.174Z","0.0.13":"2017-10-13T04:57:57.355Z","0.0.14":"2017-10-29T05:32:28.912Z","0.0.15":"2017-10-29T05:42:21.392Z","0.0.16":"2017-10-31T18:24:24.072Z","0.0.17":"2017-11-10T09:56:42.827Z","0.0.18":"2017-11-10T10:07:01.942Z","0.0.19":"2017-11-24T09:09:57.762Z","0.0.20":"2017-11-24T09:14:08.839Z","0.0.21":"2017-11-24T09:15:36.992Z","0.0.22":"2017-11-24T09:22:40.102Z","0.0.23":"2017-11-24T09:25:31.408Z","0.0.24":"2017-11-24T09:31:21.870Z","0.0.25":"2017-11-24T09:39:26.221Z","0.0.26":"2017-11-24T09:47:40.892Z","0.0.27":"2017-11-24T10:18:01.976Z","0.0.28":"2017-12-06T05:41:45.764Z","0.0.29":"2017-12-06T05:46:52.340Z","0.1.0":"2017-12-18T15:05:15.556Z","0.1.1":"2017-12-25T19:42:54.173Z","0.1.2":"2017-12-25T19:55:49.123Z","0.1.3":"2017-12-25T20:01:55.095Z","0.1.4":"2017-12-28T04:48:13.401Z","0.1.5":"2017-12-28T04:54:32.399Z","0.1.6":"2017-12-29T14:15:05.921Z","0.1.7":"2017-12-29T15:23:26.035Z","0.1.8":"2018-01-08T12:48:39.149Z","0.1.9":"2018-01-09T06:47:08.064Z","0.1.10":"2018-01-11T06:11:41.312Z","0.1.11":"2018-01-11T12:35:46.645Z","0.1.12":"2018-01-12T06:35:05.818Z","0.1.13":"2018-01-24T14:19:49.540Z","0.1.14":"2018-01-28T14:19:37.820Z","0.1.15":"2018-01-30T11:12:50.312Z","0.2.0":"2018-03-04T06:25:30.984Z","0.3.0":"2018-03-22T09:43:25.829Z","0.4.0":"2018-04-10T11:35:41.965Z","0.5.0":"2018-04-10T11:38:27.005Z","0.5.1":"2018-04-10T12:10:58.774Z","0.5.2":"2018-04-28T13:18:53.895Z","0.5.3":"2018-04-28T13:30:20.470Z","0.5.4":"2018-04-29T17:03:57.179Z"},"homepage":"https://github.com/singapore/renovate-config","repository":{"type":"git","url":"git+https://rarkins@github.com/singapore/renovate-config.git"},"author":{"name":"Rhys Arkins","email":"rhys@arkins.net"},"bugs":{"url":"https://github.com/singapore/renovate-config/issues"},"license":"MIT","readmeFilename":"readme.md","_attachments":{}}