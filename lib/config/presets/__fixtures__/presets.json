{
  "config": {
    "base": {
      "description": "Default base configuration for all languages",
      "extends": [
        ":separateMajorReleases",
        ":combinePatchMinorReleases",
        ":ignoreUnstable",
        ":prImmediately",
        ":semanticPrefixFixDepsChoreOthers",
        ":updateNotScheduled",
        ":automergeDisabled",
        ":ignoreModulesAndTests",
        ":autodetectPinVersions",
        ":prHourlyLimit2",
        ":prConcurrentLimit20",
        "group:monorepos",
        "group:recommended",
        "helpers:disableTypesNodeMajor"
      ]
    },
    "base-js": {
      "description": "Base configuration for Javascript (deprecated)",
      "extends": ["config:base"]
    },
    "js-app": {
      "description": "Default configuration for webapps",
      "extends": ["config:base", ":pinAllExceptPeerDependencies"]
    },
    "js-lib": {
      "description": "Default configuration for libraries",
      "extends": ["config:base", ":pinOnlyDevDependencies"]
    },
    "semverAllMonthly": {
      "description": "Preserve semver ranges and update everything together once a month",
      "extends": [
        ":preserveSemverRanges",
        "group:all",
        "schedule:monthly",
        ":maintainLockFilesMonthly"
      ],
      "lockFileMaintenance": {
        "commitMessageAction": "Update",
        "extends": ["group:all"]
      },
      "separateMajorMinor": false
    }
  },
  "default": {
    "app": {
      "description": "deprecated alias for config:js-app",
      "extends": ["config:js-app"]
    },
    "assignAndReview": {
      "description": "Set <code>{{arg0}}</code> as assignee and reviewer of PRs",
      "extends": [":assignee({{arg0}})", ":reviewer({{arg0}})"]
    },
    "assignee": {
      "assignees": ["{{arg0}}"],
      "description": "Assign PRs to <code>{{arg0}}</code>"
    },
    "autodetectPinVersions": {
      "description": "Autodetect whether to pin dependencies or maintain ranges",
      "rangeStrategy": "auto"
    },
    "automergeAll": {
      "automerge": true,
      "description": "Automerge all upgrades (including major) if they pass tests"
    },
    "automergeBranch": {
      "automergeType": "branch",
      "description": "If automerging, push the new commit directly to base branch (no PR)"
    },
    "automergeBranchMergeCommit": {
      "automergeType": "branch-merge-commit",
      "description": "If automerging, perform a merge-commit on branch (no PR) - deprecated, use :automergeBranch instead"
    },
    "automergeBranchPush": {
      "automergeType": "branch-push",
      "description": "If automerging, push the new commit directly to base branch (no PR) - deprecated, use :automergeBranch instead"
    },
    "automergeDigest": {
      "description": "Automerge digest upgrades if they pass tests",
      "digest": {"automerge": true}
    },
    "automergeDisabled": {
      "automerge": false,
      "description": "Disable automerging feature - wait for humans to merge all PRs"
    },
    "automergeLinters": {
      "description": "Update lint packages automatically if tests pass",
      "packageRules": [{"extends": ["packages:linters"], "automerge": true}]
    },
    "automergeMajor": {
      "automerge": true,
      "description": "Automerge all upgrades (including major) if they pass tests"
    },
    "automergeMinor": {
      "description": "Automerge patch and minor upgrades if they pass tests",
      "lockFileMaintenance": {"automerge": true},
      "minor": {"automerge": true},
      "patch": {"automerge": true},
      "pin": {"automerge": true}
    },
    "automergePatch": {
      "description": "Automerge patch upgrades if they pass tests",
      "lockFileMaintenance": {"automerge": true},
      "patch": {"automerge": true},
      "pin": {"automerge": true},
      "separateMinorPatch": true
    },
    "automergePr": {
      "automergeType": "pr",
      "description": "Raise a PR first before any automerging"
    },
    "automergeRequireAllStatusChecks": {
      "description": "Require all status checks to pass before any automerging",
      "requiredStatusChecks": []
    },
    "automergeTesters": {
      "description": "Update testing packages automatically if tests pass",
      "packageRules": [{"extends": ["packages:test"], "automerge": true}]
    },
    "automergeTypes": {
      "description": "Update @types/* packages automatically if tests pass",
      "packageRules": [{"packagePatterns": ["^@types/"], "automerge": true}]
    },
    "base": {
      "description": "deprecated alias for config:base",
      "extends": ["config:base"]
    },
    "combinePatchMinorReleases": {
      "description": "Do not separate patch and minor upgrades into separate PRs for the same dependency",
      "separateMinorPatch": false
    },
    "description": "This presets file is intended for simple and commonly used presets. This is a special preset file, because each element below can be accessed using the `:` prefix e.g `:enableRenovate`.",
    "disableDevDependencies": {
      "description": "Do not renovate <code>devDependencies</code> versions/ranges",
      "packageRules": [{"depTypeList": ["devDependencies"], "enabled": false}]
    },
    "disableDigestUpdates": {
      "description": "Disable digest and git hash updates",
      "digest": {"enabled": false}
    },
    "disableLockFiles": {
      "description": "Disable lock file updates",
      "updateLockFiles": false
    },
    "disableMajorUpdates": {
      "description": "Disables major updates",
      "major": {"enabled": false}
    },
    "disablePeerDependencies": {
      "description": "Do not renovate <code>peerDependencies</code> versions/ranges",
      "packageRules": [{"depTypeList": ["peerDependencies"], "enabled": false}]
    },
    "disableRateLimiting": {
      "description": "Remove hourly and concurrent rate limits",
      "prConcurrentLimit": 0,
      "prHourlyLimit": 0
    },
    "disableRenovate": {"description": "Disable renovate", "enabled": false},
    "disableVulnerabilityAlerts": {
      "description": "Disable vulnerability alerts completely",
      "vulnerabilityAlerts": {"enabled": false}
    },
    "doNotPinPackage": {
      "description": "Disable version pinning for <code>{{arg0}}</code>",
      "packageRules": [
        {"packageNames": ["{{arg0}}"], "rangeStrategy": "replace"}
      ]
    },
    "docker": {
      "description": "Keep Dockerfile FROM sources updated",
      "docker": {"enabled": true}
    },
    "enableRenovate": {"description": "Enable renovate", "enabled": true},
    "enableVulnerabilityAlerts": {
      "description": "Raise PR when vulnerability alerts are detected",
      "vulnerabilityAlerts": {"enabled": true}
    },
    "enableVulnerabilityAlertsWithLabel": {
      "description": "Raise PR when vulnerability alerts are detected with label <code>{{arg0}}</code>",
      "vulnerabilityAlerts": {"enabled": true, "labels": ["{{arg0}}"]}
    },
    "followTag": {
      "description": "For package <code>{{arg0}}</code>, strictly follow release tag <code>{{arg1}}</code>",
      "packageRules": [{"packageNames": ["{{arg0}}"], "followTag": "{{arg1}}"}]
    },
    "gitSignOff": {
      "commitBody": "Signed-off-by: {{{gitAuthor}}}",
      "description": "Append git Signed-off-by signature to git commits."
    },
    "githubComToken": {
      "description": "Use provided token for github.com lookups",
      "hostRules": [
        {"domainName": "github.com", "encrypted": {"token": "{{arg0}}"}}
      ]
    },
    "gomod": {
      "description": "Enable Go modules support",
      "gomod": {"enabled": true}
    },
    "group": {
      "description": "Group {{arg1}} packages into same branch/PR",
      "packageRules": [{"extends": ["{{arg0}}"], "groupName": "{{arg1}}"}]
    },
    "ignoreModulesAndTests": {
      "description": "Ignore `node_modules`, `bower_components`, `vendor` and various test/tests directories",
      "ignorePaths": [
        "**/node_modules/**",
        "**/bower_components/**",
        "**/vendor/**",
        "**/examples/**",
        "**/__tests__/**",
        "**/test/**",
        "**/tests/**",
        "**/__fixtures__/**"
      ]
    },
    "ignoreUnstable": {
      "description": "Upgrade to unstable versions only if the existing version is unstable",
      "ignoreUnstable": true
    },
    "includeNodeModules": {
      "description": "Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.",
      "ignorePaths": []
    },
    "label": {
      "description": "Apply label <code>{{arg0}}</code> to PRs",
      "labels": ["{{arg0}}"]
    },
    "labels": {
      "description": "Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs",
      "labels": ["{{arg0}}", "{{arg1}}"]
    },
    "library": {
      "description": "deprecated alias for config:js-lib",
      "extends": ["config:js-lib"]
    },
    "maintainLockFilesDisabled": {
      "description": "Update existing lock files only when <code>package.json</code> is modified",
      "lockFileMaintenance": {"enabled": false}
    },
    "maintainLockFilesMonthly": {
      "description": "Run lock file maintenance (updates) on the first day of each month",
      "lockFileMaintenance": {"enabled": true, "extends": "schedule:monthly"}
    },
    "maintainLockFilesWeekly": {
      "description": "Run lock file maintenance (updates) early Monday mornings",
      "lockFileMaintenance": {"enabled": true, "extends": "schedule:weekly"}
    },
    "masterIssue": {
      "description": "Enable Renovate master issue creation",
      "masterIssue": true
    },
    "masterIssueApproval": {
      "description": "Enable Renovate master issue approval workflow",
      "masterIssueApproval": true
    },
    "meteor": {
      "description": "Keep Meteor Npm.depends packages updated",
      "meteor": {"enabled": true}
    },
    "noUnscheduledUpdates": {
      "description": "Make no updates to branches when not scheduled",
      "updateNotScheduled": false
    },
    "npm": {
      "description": "Keep package.json npm dependencies updated",
      "npm": {"enabled": true}
    },
    "onlyNpm": {
      "description": "Renovate only npm dependencies",
      "docker": {"enabled": false},
      "meteor": {"enabled": false}
    },
    "pathSemanticCommitType": {
      "description": "Use semanticCommitType {{arg0}} for all package files matching path {{arg1}}",
      "packageRules": [
        {"paths": ["{{arg0}}"], "semanticCommitType": "{{arg1}}"}
      ]
    },
    "pinAllExceptPeerDependencies": {
      "description": "Pin dependency versions for all except <code>peerDependencies</code>",
      "packageRules": [
        {"packagePatterns": ["*"], "rangeStrategy": "pin"},
        {
          "depTypeList": ["engines", "peerDependencies"],
          "rangeStrategy": "auto"
        }
      ]
    },
    "pinDependencies": {
      "description": "Pin dependency versions for <code>dependencies</code>",
      "packageRules": [
        {"depTypeList": ["dependencies"], "rangeStrategy": "pin"}
      ]
    },
    "pinDevDependencies": {
      "description": "Pin dependency versions for <code>devDependencies</code>",
      "packageRules": [
        {"depTypeList": ["devDependencies"], "rangeStrategy": "pin"}
      ]
    },
    "pinDigestsDisabled": {
      "description": "Disable pinning of docker dependency digests",
      "pinDigests": false
    },
    "pinOnlyDevDependencies": {
      "description": "Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others",
      "packageRules": [
        {"packagePatterns": ["*"], "rangeStrategy": "replace"},
        {"depTypeList": ["devDependencies"], "rangeStrategy": "pin"},
        {"depTypeList": ["peerDependencies"], "rangeStrategy": "widen"}
      ]
    },
    "pinSkipCi": {
      "description": "Add [skip ci] to commit message body whenever pinning",
      "pin": {"commitBody": "[skip ci]"}
    },
    "pinVersions": {
      "description": "Use version pinning (maintain a single version only and not semver ranges)",
      "rangeStrategy": "pin"
    },
    "prConcurrentLimit10": {
      "description": "Limit to maximum 10 open PRs",
      "prConcurrentLimit": 10
    },
    "prConcurrentLimit20": {
      "description": "Limit to maximum 20 open PRs at any time",
      "prConcurrentLimit": 20
    },
    "prConcurrentLimitNone": {
      "description": "Remove limit for open PRs",
      "prConcurrentLimit": 0
    },
    "prHourlyLimit1": {
      "description": "Rate limit PR creation to a maximum of one per hour",
      "prHourlyLimit": 1
    },
    "prHourlyLimit2": {
      "description": "Rate limit PR creation to a maximum of two per hour",
      "prHourlyLimit": 2
    },
    "prHourlyLimit4": {
      "description": "Rate limit PR creation to a maximum of four per hour",
      "prHourlyLimit": 4
    },
    "prHourlyLimitNone": {
      "description": "Removes rate limit for PR creation per hour",
      "prHourlyLimit": 0
    },
    "prImmediately": {
      "description": "Raise PRs immediately (after branch is created)",
      "prCreation": "immediate"
    },
    "prNotPending": {
      "description": "Wait until branch tests have passed or failed before creating the PR",
      "prCreation": "not-pending"
    },
    "preserveSemverRanges": {
      "description": "Preserve (but continue to upgrade) any existing semver ranges",
      "rangeStrategy": "replace"
    },
    "rebaseStalePrs": {
      "description": "Rebase existing PRs any time the base branch has been updated",
      "rebaseStalePrs": true
    },
    "renovatePrefix": {
      "branchPrefix": "renovate/",
      "description": "Use <code>renovate/</code> as prefix for all branch names"
    },
    "respectLatest": {
      "description": "Upgrade versions up to the \"latest\" tag in npm registry",
      "respectLatest": true
    },
    "reviewer": {
      "description": "Add <code>{{arg0}}</code> as reviewer for PRs",
      "reviewers": ["{{arg0}}"]
    },
    "semanticCommitScope": {
      "description": "Use semantic commit scope <code>{{arg0}}</code> for all commits and PR titles",
      "semanticCommitScope": "{{arg0}}"
    },
    "semanticCommitScopeDisabled": {
      "description": "Disable semantic commit scope for all commits and PR titles",
      "semanticCommitScope": null
    },
    "semanticCommitType": {
      "description": "Use <code>{{arg0}}</code> as semantic commit type for commit messages and PR titles",
      "semanticCommitType": "{{arg0}}"
    },
    "semanticCommitTypeAll": {
      "description": "If semantic commits detected, use semantic commit type <code>{{arg0}}</code> for all",
      "packageRules": [
        {"packagePatterns": ["*"], "semanticCommitType": "{{arg0}}"}
      ]
    },
    "semanticCommits": {
      "description": "Use semantic prefixes for commit messages and PR titles",
      "semanticCommits": true
    },
    "semanticCommitsDisabled": {
      "description": "Disable semantic prefixes for commit messages and PR titles",
      "semanticCommits": false
    },
    "semanticPrefixChore": {
      "description": "Use <code>chore</code> as semantic commit type for commit messages and PR titles",
      "extends": [":semanticCommitType(chore)"]
    },
    "semanticPrefixFix": {
      "description": "Use <code>fix</code> as semantic commit type for commit messages and PR titles",
      "extends": [":semanticCommitType(fix)"]
    },
    "semanticPrefixFixDepsChoreOthers": {
      "description": "If semantic commits detected, use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others",
      "packageRules": [
        {"packagePatterns": ["*"], "semanticCommitType": "chore"},
        {"depTypeList": ["dependencies"], "semanticCommitType": "fix"}
      ]
    },
    "separateMajorReleases": {
      "description": "Separate major versions of dependencies into individual branches/PRs",
      "separateMajorMinor": true
    },
    "separateMultipleMajorReleases": {
      "description": "Separate each available major versions of dependencies into individual branches/PRs",
      "separateMajorMinor": true,
      "separateMultipleMajor": true
    },
    "separatePatchReleases": {
      "description": "Separate patch and minor releases of dependencies into separate PRs",
      "separateMinorPatch": true
    },
    "skipStatusChecks": {
      "description": "Skip status checks and automerge right away",
      "requiredStatusChecks": null
    },
    "timezone": {
      "description": "Evaluate schedules according to timezone {{arg0}}",
      "timezone": "{{arg0}}"
    },
    "unpublishSafe": {
      "description": "Set a status check to warn when upgrades <  24 hours old might get unpublished",
      "unpublishSafe": true
    },
    "unpublishSafeDisabled": {
      "description": "Create branches/PRs for dependency upgrades as soon as they're available",
      "unpublishSafe": false
    },
    "updateNotScheduled": {
      "description": "Keep existing branches updated even when not scheduled",
      "updateNotScheduled": true
    },
    "widenPeerDependencies": {
      "description": "Always widen peerDependencies semver ranges when updating, instead of replacing",
      "packageRules": [
        {"depTypeList": ["peerDependencies"], "versionStrategy": "widen"}
      ]
    }
  },
  "docker": {
    "disable": {
      "circleci": {"enabled": false},
      "docker": {"enabled": false},
      "docker-compose": {"enabled": false}
    },
    "disableMajor": {"docker": {"major": {"enabled": false}}},
    "enableMajor": {"docker": {"major": {"enabled": true}}},
    "pinDigests": {
      "description": "Pin Docker digests",
      "docker": {"pinDigests": true}
    }
  },
  "group": {
    "SwashbuckleMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from Swashbuckle monorepo together",
          "extends": "monorepo:Swashbuckle",
          "groupName": "Swashbuckle monorepo"
        }
      ]
    },
    "accountsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from accounts monorepo together",
          "extends": "monorepo:accounts",
          "groupName": "accounts monorepo"
        }
      ]
    },
    "ag-gridMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ag-grid monorepo together",
          "extends": "monorepo:ag-grid",
          "groupName": "ag-grid monorepo"
        }
      ]
    },
    "algolia-react-instantsearchMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from algolia-react-instantsearch monorepo together",
          "extends": "monorepo:algolia-react-instantsearch",
          "groupName": "algolia-react-instantsearch monorepo"
        }
      ]
    },
    "all": {
      "description": "Group all updates together",
      "groupName": "all dependencies",
      "groupSlug": "all",
      "lockFileMaintenance": {"enabled": false},
      "packageRules": [
        {
          "packagePatterns": ["*"],
          "groupName": "all dependencies",
          "groupSlug": "all"
        }
      ],
      "separateMajorMinor": false
    },
    "allApollographql": {
      "description": "Group all packages published by Apollo GraphQL together",
      "packageRules": [
        {
          "extends": "packages:apollographql",
          "groupName": "Apollo GraphQL packages"
        }
      ]
    },
    "allNonMajor": {
      "description": "Group all minor and patch updates together",
      "packageRules": [
        {
          "packagePatterns": ["*"],
          "minor": {
            "groupName": "all non-major dependencies",
            "groupSlug": "all-minor-patch"
          }
        }
      ]
    },
    "angular1Monorepo": {
      "packageRules": [
        {
          "description": "Group packages from angular1 monorepo together",
          "extends": "monorepo:angular1",
          "groupName": "angular1 monorepo"
        }
      ]
    },
    "angularMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from angular monorepo together",
          "extends": "monorepo:angular",
          "groupName": "angular monorepo"
        }
      ]
    },
    "angularcliMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from angularcli monorepo together",
          "extends": "monorepo:angularcli",
          "groupName": "angularcli monorepo"
        }
      ]
    },
    "angularmaterialMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from angularmaterial monorepo together",
          "extends": "monorepo:angularmaterial",
          "groupName": "angularmaterial monorepo"
        }
      ]
    },
    "apollo-serverMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from apollo-server monorepo together",
          "extends": "monorepo:apollo-server",
          "groupName": "apollo-server monorepo"
        }
      ]
    },
    "apolloclientMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from apolloclient monorepo together",
          "extends": "monorepo:apolloclient",
          "groupName": "apolloclient monorepo"
        }
      ]
    },
    "apollolinkMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from apollolink monorepo together",
          "extends": "monorepo:apollolink",
          "groupName": "apollolink monorepo"
        }
      ]
    },
    "arcus background-jobsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus background-jobs monorepo together",
          "extends": "monorepo:arcus background-jobs",
          "groupName": "arcus background-jobs monorepo"
        }
      ]
    },
    "arcus event-gridMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus event-grid monorepo together",
          "extends": "monorepo:arcus event-grid",
          "groupName": "arcus event-grid monorepo"
        }
      ]
    },
    "arcus messagingMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus messaging monorepo together",
          "extends": "monorepo:arcus messaging",
          "groupName": "arcus messaging monorepo"
        }
      ]
    },
    "arcus observabilityMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus observability monorepo together",
          "extends": "monorepo:arcus observability",
          "groupName": "arcus observability monorepo"
        }
      ]
    },
    "arcus securityMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus security monorepo together",
          "extends": "monorepo:arcus security",
          "groupName": "arcus security monorepo"
        }
      ]
    },
    "arcus webapiMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from arcus webapi monorepo together",
          "extends": "monorepo:arcus webapi",
          "groupName": "arcus webapi monorepo"
        }
      ]
    },
    "aspnet AspNetWebStackMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from aspnet AspNetWebStack monorepo together",
          "extends": "monorepo:aspnet AspNetWebStack",
          "groupName": "aspnet AspNetWebStack monorepo"
        }
      ]
    },
    "aspnet ExtensionsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from aspnet Extensions monorepo together",
          "extends": "monorepo:aspnet Extensions",
          "groupName": "aspnet Extensions monorepo"
        }
      ]
    },
    "aws-cdkMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from aws-cdk monorepo together",
          "extends": "monorepo:aws-cdk",
          "groupName": "aws-cdk monorepo"
        }
      ]
    },
    "aws-java-sdkMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from aws-java-sdk monorepo together",
          "extends": "monorepo:aws-java-sdk",
          "groupName": "aws-java-sdk monorepo"
        }
      ]
    },
    "awsappsyncMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from awsappsync monorepo together",
          "extends": "monorepo:awsappsync",
          "groupName": "awsappsync monorepo"
        }
      ]
    },
    "azure azure-libraries-for-netMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from azure azure-libraries-for-net monorepo together",
          "extends": "monorepo:azure azure-libraries-for-net",
          "groupName": "azure azure-libraries-for-net monorepo"
        }
      ]
    },
    "azure azure-sdk-for-netMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from azure azure-sdk-for-net monorepo together",
          "extends": "monorepo:azure azure-sdk-for-net",
          "groupName": "azure azure-sdk-for-net monorepo"
        }
      ]
    },
    "azure azure-storage-netMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from azure azure-storage-net monorepo together",
          "extends": "monorepo:azure azure-storage-net",
          "groupName": "azure azure-storage-net monorepo"
        }
      ]
    },
    "babel6Monorepo": {
      "packageRules": [
        {
          "description": "Group packages from babel6 monorepo together",
          "extends": "monorepo:babel6",
          "groupName": "babel6 monorepo"
        }
      ]
    },
    "babelMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from babel monorepo together",
          "extends": "monorepo:babel",
          "groupName": "babel monorepo"
        }
      ]
    },
    "basetMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from baset monorepo together",
          "extends": "monorepo:baset",
          "groupName": "baset monorepo"
        }
      ]
    },
    "braveMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from brave monorepo together",
          "extends": "monorepo:brave",
          "groupName": "brave monorepo"
        }
      ]
    },
    "bugsnag-jsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from bugsnag-js monorepo together",
          "extends": "monorepo:bugsnag-js",
          "groupName": "bugsnag-js monorepo"
        }
      ]
    },
    "capacitorMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from capacitor monorepo together",
          "extends": "monorepo:capacitor",
          "groupName": "capacitor monorepo"
        }
      ]
    },
    "clarityMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from clarity monorepo together",
          "extends": "monorepo:clarity",
          "groupName": "clarity monorepo"
        }
      ]
    },
    "commitlintMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from commitlint monorepo together",
          "extends": "monorepo:commitlint",
          "groupName": "commitlint monorepo"
        }
      ]
    },
    "definitelyTyped": {
      "description": "Group all @types packages together",
      "packageRules": [
        {"groupName": "definitelyTyped", "packagePatterns": ["^@types/"]}
      ]
    },
    "devextreme-reactiveMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from devextreme-reactive monorepo together",
          "extends": "monorepo:devextreme-reactive",
          "groupName": "devextreme-reactive monorepo"
        }
      ]
    },
    "dotNetCore": {
      "description": ".NET Core Docker containers",
      "packageRules": [
        {
          "datasources": ["docker"],
          "packagePatterns": ["^mcr.microsoft.com/dotnet/core/"],
          "groupName": ".NET Core Docker containers"
        }
      ]
    },
    "dropwizardMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from dropwizard monorepo together",
          "extends": "monorepo:dropwizard",
          "groupName": "dropwizard monorepo"
        }
      ]
    },
    "electron-forgeMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from electron-forge monorepo together",
          "extends": "monorepo:electron-forge",
          "groupName": "electron-forge monorepo"
        }
      ]
    },
    "ember-decoratorsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ember-decorators monorepo together",
          "extends": "monorepo:ember-decorators",
          "groupName": "ember-decorators monorepo"
        }
      ]
    },
    "emotionMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from emotion monorepo together",
          "extends": "monorepo:emotion",
          "groupName": "emotion monorepo"
        }
      ]
    },
    "expoMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from expo monorepo together",
          "extends": "monorepo:expo",
          "groupName": "expo monorepo"
        }
      ]
    },
    "fimbullinterMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from fimbullinter monorepo together",
          "extends": "monorepo:fimbullinter",
          "groupName": "fimbullinter monorepo"
        }
      ]
    },
    "flopflipMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from flopflip monorepo together",
          "extends": "monorepo:flopflip",
          "groupName": "flopflip monorepo"
        }
      ]
    },
    "fortawesome": {
      "description": "Group all packages by Font Awesome together",
      "packageRules": [
        {"groupName": "Font Awesome", "packagePatterns": ["^@fortawesome/"]}
      ]
    },
    "framework7Monorepo": {
      "packageRules": [
        {
          "description": "Group packages from framework7 monorepo together",
          "extends": "monorepo:framework7",
          "groupName": "framework7 monorepo"
        }
      ]
    },
    "fusionjs": {
      "description": "Fusion.js packages",
      "packageNames": [
        "fusion-cli",
        "fusion-core",
        "fusion-test-utils",
        "fusion-tokens"
      ],
      "packagePatterns": [
        "^fusion-plugin-*",
        "^fusion-react*",
        "^fusion-apollo*"
      ]
    },
    "gatsbyMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from gatsby monorepo together",
          "extends": "monorepo:gatsby",
          "groupName": "gatsby monorepo"
        }
      ]
    },
    "goOpenapi": {
      "description": "Group go-openapi packages together",
      "packageRules": [
        {
          "datasources": ["go"],
          "groupName": "go-openapi packages",
          "groupSlug": "go-openapi",
          "packagePatterns": ["^github.com/go-openapi/"]
        }
      ]
    },
    "graphql-modulesMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from graphql-modules monorepo together",
          "extends": "monorepo:graphql-modules",
          "groupName": "graphql-modules monorepo"
        }
      ]
    },
    "graphql-toolkitMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from graphql-toolkit monorepo together",
          "extends": "monorepo:graphql-toolkit",
          "groupName": "graphql-toolkit monorepo"
        }
      ]
    },
    "graphqlcodegeneratorMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from graphqlcodegenerator monorepo together",
          "extends": "monorepo:graphqlcodegenerator",
          "groupName": "graphqlcodegenerator monorepo"
        }
      ]
    },
    "hamcrestMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from hamcrest monorepo together",
          "extends": "monorepo:hamcrest",
          "groupName": "hamcrest monorepo"
        }
      ]
    },
    "hapijsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from hapijs monorepo together",
          "extends": "monorepo:hapijs",
          "groupName": "hapijs monorepo"
        }
      ]
    },
    "hibernateCommons": {
      "description": "Group Java Hibernate Commons packages",
      "packageRules": [
        {
          "packagePatterns": ["^org.hibernate.common:"],
          "groupName": "hibernate commons"
        }
      ]
    },
    "hibernateCore": {
      "description": "Group Java Hibernate Core packages",
      "packageRules": [
        {"packagePatterns": ["^org.hibernate:"], "groupName": "hibernate core"}
      ]
    },
    "hibernateOgm": {
      "description": "Group Java Hibernate OGM packages",
      "packageRules": [
        {
          "packagePatterns": ["^org.hibernate.ogm:"],
          "groupName": "hibernate ogm"
        }
      ]
    },
    "hibernateValidator": {
      "description": "Group Java Hibernate Validator packages",
      "packageRules": [
        {
          "packagePatterns": ["^org.hibernate.validator:"],
          "groupName": "hibernate validator"
        }
      ]
    },
    "illuminate": {
      "description": "Group PHP illuminate packages together",
      "packageRules": [
        {
          "packagePatterns": ["^illuminate/"],
          "groupName": "illuminate packages",
          "groupSlug": "illuminate"
        }
      ]
    },
    "infrastructureMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from infrastructure monorepo together",
          "extends": "monorepo:infrastructure",
          "groupName": "infrastructure monorepo"
        }
      ]
    },
    "ionic-nativeMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ionic-native monorepo together",
          "extends": "monorepo:ionic-native",
          "groupName": "ionic-native monorepo"
        }
      ]
    },
    "jasmineMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from jasmine monorepo together",
          "extends": "monorepo:jasmine",
          "groupName": "jasmine monorepo"
        }
      ]
    },
    "jekyllEcosystem": {
      "description": "Group jekyll and related ruby packages together",
      "packageRules": [
        {
          "sourceUrlPrefixes": [
            "https://github.com/jekyll/",
            "https://github.com/github/pages-gem"
          ],
          "groupName": "jekyll ecosystem packages"
        }
      ]
    },
    "jerseyMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from jersey monorepo together",
          "extends": "monorepo:jersey",
          "groupName": "jersey monorepo"
        }
      ]
    },
    "jestMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from jest monorepo together",
          "extends": "monorepo:jest",
          "groupName": "jest monorepo"
        }
      ]
    },
    "jsTest": {
      "description": "Group JS test packages together",
      "packageRules": [
        {"extends": "packages:jsTest", "groupName": "JS test packages"}
      ]
    },
    "jsTestMonMajor": {
      "description": "Group non-major JS test package updates together",
      "packageRules": [
        {
          "extends": "packages:jsTest",
          "minor": {"groupName": "JS test packages"}
        }
      ]
    },
    "jsUnitTest": {
      "description": "Group JS unit test packages together",
      "packageRules": [
        {"extends": "packages:jsUnitTest", "groupName": "JS unit test packages"}
      ]
    },
    "jsUnitTestNonMajor": {
      "description": "Group JS unit test packages together",
      "packageRules": [
        {
          "extends": "packages:jsUnitTest",
          "minor": {"groupName": "JS unit test packages"}
        }
      ]
    },
    "lernaMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from lerna monorepo together",
          "extends": "monorepo:lerna",
          "groupName": "lerna monorepo"
        }
      ]
    },
    "linguiMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from lingui monorepo together",
          "extends": "monorepo:lingui",
          "groupName": "lingui monorepo"
        }
      ]
    },
    "linters": {
      "description": "Group various lint packages together",
      "packageRules": [{"extends": "packages:linters", "groupName": "linters"}]
    },
    "lodashMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from lodash monorepo together",
          "extends": "monorepo:lodash",
          "groupName": "lodash monorepo"
        }
      ]
    },
    "loopbackMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from loopback monorepo together",
          "extends": "monorepo:loopback",
          "groupName": "loopback monorepo"
        }
      ]
    },
    "materialMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from material monorepo together",
          "extends": "monorepo:material",
          "groupName": "material monorepo"
        }
      ]
    },
    "mdc-reactMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from mdc-react monorepo together",
          "extends": "monorepo:mdc-react",
          "groupName": "mdc-react monorepo"
        }
      ]
    },
    "mdxMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from mdx monorepo together",
          "extends": "monorepo:mdx",
          "groupName": "mdx monorepo"
        }
      ]
    },
    "monorepos": {
      "description": "Group known monorepo packages together",
      "extends": [
        "group:ag-gridMonorepo",
        "group:arcus event-gridMonorepo",
        "group:arcus securityMonorepo",
        "group:arcus messagingMonorepo",
        "group:arcus observabilityMonorepo",
        "group:arcus webapiMonorepo",
        "group:arcus background-jobsMonorepo",
        "group:algolia-react-instantsearchMonorepo",
        "group:apollo-serverMonorepo",
        "group:aspnet AspNetWebStackMonorepo",
        "group:aspnet ExtensionsMonorepo",
        "group:aws-cdkMonorepo",
        "group:azure azure-libraries-for-netMonorepo",
        "group:azure azure-sdk-for-netMonorepo",
        "group:azure azure-storage-netMonorepo",
        "group:bugsnag-jsMonorepo",
        "group:devextreme-reactiveMonorepo",
        "group:electron-forgeMonorepo",
        "group:ember-decoratorsMonorepo",
        "group:graphql-modulesMonorepo",
        "group:ionic-nativeMonorepo",
        "group:mdc-reactMonorepo",
        "group:ngx-formlyMonorepo",
        "group:ngxs-storeMonorepo",
        "group:react-apolloMonorepo",
        "group:react-dndMonorepo",
        "group:react-navigationMonorepo",
        "group:reactivestack-cookiesMonorepo",
        "group:semantic-releaseMonorepo",
        "group:telus-tdsMonorepo",
        "group:typescript-eslintMonorepo",
        "group:typography-jsMonorepo",
        "group:vue-cliMonorepo",
        "group:accountsMonorepo",
        "group:angular1Monorepo",
        "group:angularMonorepo",
        "group:angularcliMonorepo",
        "group:apolloclientMonorepo",
        "group:apollolinkMonorepo",
        "group:awsappsyncMonorepo",
        "group:babelMonorepo",
        "group:basetMonorepo",
        "group:braveMonorepo",
        "group:capacitorMonorepo",
        "group:clarityMonorepo",
        "group:commitlintMonorepo",
        "group:dropwizardMonorepo",
        "group:emotionMonorepo",
        "group:expoMonorepo",
        "group:fimbullinterMonorepo",
        "group:flopflipMonorepo",
        "group:framework7Monorepo",
        "group:gatsbyMonorepo",
        "group:graphqlcodegeneratorMonorepo",
        "group:graphql-toolkitMonorepo",
        "group:hamcrestMonorepo",
        "group:hapijsMonorepo",
        "group:infrastructureMonorepo",
        "group:jasmineMonorepo",
        "group:jerseyMonorepo",
        "group:jestMonorepo",
        "group:lernaMonorepo",
        "group:linguiMonorepo",
        "group:lodashMonorepo",
        "group:loopbackMonorepo",
        "group:materialMonorepo",
        "group:mdxMonorepo",
        "group:muiMonorepo",
        "group:nestMonorepo",
        "group:neutrinoMonorepo",
        "group:nextjsMonorepo",
        "group:ngrxMonorepo",
        "group:nrwlMonorepo",
        "group:nuxtjsMonorepo",
        "group:openfeignMonorepo",
        "group:picassoMonorepo",
        "group:pollyjsMonorepo",
        "group:pouchdbMonorepo",
        "group:reactMonorepo",
        "group:reactrouterMonorepo",
        "group:reakitMonorepo",
        "group:remarkMonorepo",
        "group:router5Monorepo",
        "group:sentryMonorepo",
        "group:springfoxMonorepo",
        "group:sanityMonorepo",
        "group:storybookMonorepo",
        "group:strapiMonorepo",
        "group:strykerMonorepo",
        "group:surveyjsMonorepo",
        "group:SwashbuckleMonorepo",
        "group:treatMonorepo",
        "group:typefacesMonorepo",
        "group:uppyMonorepo",
        "group:vueMonorepo",
        "group:vuepressMonorepo",
        "group:webdriverioMonorepo",
        "group:workboxMonorepo",
        "group:babel6Monorepo",
        "group:wordpressMonorepo",
        "group:angularmaterialMonorepo",
        "group:aws-java-sdkMonorepo"
      ],
      "ignoreDeps": []
    },
    "muiMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from mui monorepo together",
          "extends": "monorepo:mui",
          "groupName": "mui monorepo"
        }
      ]
    },
    "nestMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from nest monorepo together",
          "extends": "monorepo:nest",
          "groupName": "nest monorepo"
        }
      ]
    },
    "neutrinoMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from neutrino monorepo together",
          "extends": "monorepo:neutrino",
          "groupName": "neutrino monorepo"
        }
      ]
    },
    "nextjsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from nextjs monorepo together",
          "extends": "monorepo:nextjs",
          "groupName": "nextjs monorepo"
        }
      ]
    },
    "ngrxMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ngrx monorepo together",
          "extends": "monorepo:ngrx",
          "groupName": "ngrx monorepo"
        }
      ]
    },
    "ngx-formlyMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ngx-formly monorepo together",
          "extends": "monorepo:ngx-formly",
          "groupName": "ngx-formly monorepo"
        }
      ]
    },
    "ngxs-storeMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from ngxs-store monorepo together",
          "extends": "monorepo:ngxs-store",
          "groupName": "ngxs-store monorepo"
        }
      ]
    },
    "nrwlMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from nrwl monorepo together",
          "extends": "monorepo:nrwl",
          "groupName": "nrwl monorepo"
        }
      ]
    },
    "nuxtjsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from nuxtjs monorepo together",
          "extends": "monorepo:nuxtjs",
          "groupName": "nuxtjs monorepo"
        }
      ]
    },
    "openfeignMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from openfeign monorepo together",
          "extends": "monorepo:openfeign",
          "groupName": "openfeign monorepo"
        }
      ]
    },
    "picassoMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from picasso monorepo together",
          "extends": "monorepo:picasso",
          "groupName": "picasso monorepo"
        }
      ]
    },
    "pollyjsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from pollyjs monorepo together",
          "extends": "monorepo:pollyjs",
          "groupName": "pollyjs monorepo"
        }
      ]
    },
    "polymer": {
      "description": "Group all @polymer packages together",
      "packageRules": [
        {"groupName": "polymer packages", "packagePatterns": ["^@polymer/"]}
      ]
    },
    "postcss": {
      "description": "Group postcss packages together",
      "packageRules": [
        {"extends": "packages:postcss", "groupName": "postcss packages"}
      ]
    },
    "pouchdbMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from pouchdb monorepo together",
          "extends": "monorepo:pouchdb",
          "groupName": "pouchdb monorepo"
        }
      ]
    },
    "react-apolloMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from react-apollo monorepo together",
          "extends": "monorepo:react-apollo",
          "groupName": "react-apollo monorepo"
        }
      ]
    },
    "react-dndMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from react-dnd monorepo together",
          "extends": "monorepo:react-dnd",
          "groupName": "react-dnd monorepo"
        }
      ]
    },
    "react-navigationMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from react-navigation monorepo together",
          "extends": "monorepo:react-navigation",
          "groupName": "react-navigation monorepo"
        }
      ]
    },
    "reactMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from react monorepo together",
          "extends": "monorepo:react",
          "groupName": "react monorepo"
        }
      ]
    },
    "reactivestack-cookiesMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from reactivestack-cookies monorepo together",
          "extends": "monorepo:reactivestack-cookies",
          "groupName": "reactivestack-cookies monorepo"
        }
      ]
    },
    "reactrouterMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from reactrouter monorepo together",
          "extends": "monorepo:reactrouter",
          "groupName": "reactrouter monorepo"
        }
      ]
    },
    "reakitMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from reakit monorepo together",
          "extends": "monorepo:reakit",
          "groupName": "reakit monorepo"
        }
      ]
    },
    "recommended": {
      "description": "Use curated list of recommended non-monorepo package groupings",
      "extends": [
        "group:allApollographql",
        "group:fortawesome",
        "group:goOpenapi",
        "group:fusionjs",
        "group:hibernateCore",
        "group:hibernateValidator",
        "group:hibernateOgm",
        "group:hibernateCommons",
        "group:illuminate",
        "group:jekyllEcosystem",
        "group:polymer",
        "group:rubyOmniauth",
        "group:socketio",
        "group:springAmqp",
        "group:springAndroid",
        "group:springBatch",
        "group:springBoot",
        "group:springCloud",
        "group:springCore",
        "group:springData",
        "group:springHateoas",
        "group:springIntegration",
        "group:springKafka",
        "group:springLdap",
        "group:springMobile",
        "group:springOsgi",
        "group:springRestDocs",
        "group:springRoo",
        "group:springScala",
        "group:springSecurity",
        "group:springSession",
        "group:springShell",
        "group:springSocial",
        "group:springStatemachine",
        "group:springWebflow",
        "group:springWs",
        "group:symfony"
      ],
      "ignoreDeps": []
    },
    "remarkMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from remark monorepo together",
          "extends": "monorepo:remark",
          "groupName": "remark monorepo"
        }
      ]
    },
    "router5Monorepo": {
      "packageRules": [
        {
          "description": "Group packages from router5 monorepo together",
          "extends": "monorepo:router5",
          "groupName": "router5 monorepo"
        }
      ]
    },
    "rubyOmniauth": {
      "description": "Group omniauth packages together",
      "packageRules": [
        {
          "datasources": ["rubygems"],
          "packagePatterns": ["^omniauth"],
          "groupName": "omniauth packages"
        }
      ]
    },
    "sanityMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from sanity monorepo together",
          "extends": "monorepo:sanity",
          "groupName": "sanity monorepo"
        }
      ]
    },
    "semantic-releaseMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from semantic-release monorepo together",
          "extends": "monorepo:semantic-release",
          "groupName": "semantic-release monorepo"
        }
      ]
    },
    "sentryMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from sentry monorepo together",
          "extends": "monorepo:sentry",
          "groupName": "sentry monorepo"
        }
      ]
    },
    "socketio": {
      "description": "Group socket.io packages",
      "packageRules": [
        {"groupName": "socket.io packages", "packagePatterns": ["^socket.io"]}
      ]
    },
    "springAmqp": {
      "description": "Group Java Spring AMQP packages",
      "packageRules": [
        {
          "groupName": "spring amqp",
          "packagePatterns": ["^org.springframework.amqp:"]
        }
      ]
    },
    "springAndroid": {
      "description": "Group Java Spring Android packages",
      "packageRules": [
        {
          "groupName": "spring android",
          "packagePatterns": ["^org.springframework.android:"]
        }
      ]
    },
    "springBatch": {
      "description": "Group Java Spring Batch packages",
      "packageRules": [
        {
          "groupName": "spring batch",
          "packagePatterns": ["^org.springframework.batch:"]
        }
      ]
    },
    "springBoot": {
      "description": "Group Java Spring Boot packages",
      "packageRules": [
        {
          "groupName": "spring boot",
          "packagePatterns": ["^org.springframework.boot:"]
        }
      ]
    },
    "springCloud": {
      "description": "Group Java Spring Cloud packages",
      "packageRules": [
        {
          "groupName": "spring cloud",
          "packagePatterns": ["^org.springframework.cloud:"]
        }
      ]
    },
    "springCore": {
      "description": "Group Java Spring Core packages",
      "packageRules": [
        {
          "groupName": "spring core",
          "packagePatterns": ["^org.springframework:"]
        }
      ]
    },
    "springData": {
      "description": "Group Java Spring Data packages",
      "packageRules": [
        {
          "groupName": "spring data",
          "packagePatterns": ["^org.springframework.data:"]
        }
      ]
    },
    "springHateoas": {
      "description": "Group Java Spring HATEOAS packages",
      "packageRules": [
        {
          "groupName": "spring hateoas",
          "packagePatterns": ["^org.springframework.hateoas:"]
        }
      ]
    },
    "springIntegration": {
      "description": "Group Java Spring Integration packages",
      "packageRules": [
        {
          "groupName": "spring integration",
          "packagePatterns": ["^org.springframework.integration:"]
        }
      ]
    },
    "springKafka": {
      "description": "Group Java Spring Kafka packages",
      "packageRules": [
        {
          "groupName": "spring kafka",
          "packagePatterns": ["^org.springframework.kafka:"]
        }
      ]
    },
    "springLdap": {
      "description": "Group Java Spring LDAP packages",
      "packageRules": [
        {
          "groupName": "spring ldap",
          "packagePatterns": ["^org.springframework.ldap:"]
        }
      ]
    },
    "springMobile": {
      "description": "Group Java Spring Mobile packages",
      "packageRules": [
        {
          "groupName": "spring mobile",
          "packagePatterns": ["^org.springframework.mobile:"]
        }
      ]
    },
    "springOsgi": {
      "description": "Group Java Spring OSGi packages",
      "packageRules": [
        {
          "groupName": "spring osgi",
          "packagePatterns": ["^org.springframework.osgi:"]
        }
      ]
    },
    "springRestDocs": {
      "description": "Group Java Spring REST Docs packages",
      "packageRules": [
        {
          "groupName": "spring restdocs",
          "packagePatterns": ["^org.springframework.restdocs:"]
        }
      ]
    },
    "springRoo": {
      "description": "Group Java Spring Roo packages",
      "packageRules": [
        {
          "groupName": "spring roo",
          "packagePatterns": ["^org.springframework.roo:"]
        }
      ]
    },
    "springScala": {
      "description": "Group Java Spring Scala packages",
      "packageRules": [
        {
          "groupName": "spring scala",
          "packagePatterns": ["^org.springframework.scala:"]
        }
      ]
    },
    "springSecurity": {
      "description": "Group Java Spring Security packages",
      "packageRules": [
        {
          "groupName": "spring security",
          "packagePatterns": ["^org.springframework.security:"]
        }
      ]
    },
    "springSession": {
      "description": "Group Java Spring Session packages",
      "packageRules": [
        {
          "groupName": "spring session",
          "packagePatterns": ["^org.springframework.session:"]
        }
      ]
    },
    "springShell": {
      "description": "Group Java Spring Shell packages",
      "packageRules": [
        {
          "groupName": "spring shell",
          "packagePatterns": ["^org.springframework.shell:"]
        }
      ]
    },
    "springSocial": {
      "description": "Group Java Spring Social packages",
      "packageRules": [
        {
          "groupName": "spring social",
          "packagePatterns": ["^org.springframework.social:"]
        }
      ]
    },
    "springStatemachine": {
      "description": "Group Java Spring Statemachine packages",
      "packageRules": [
        {
          "groupName": "spring statemachine",
          "packagePatterns": ["^org.springframework.statemachine:"]
        }
      ]
    },
    "springWebflow": {
      "description": "Group Java Spring WebFlow packages",
      "packageRules": [
        {
          "groupName": "spring webflow",
          "packagePatterns": ["^org.springframework.webflow:"]
        }
      ]
    },
    "springWs": {
      "description": "Group Java Spring WS packages",
      "packageRules": [
        {
          "groupName": "spring ws",
          "packagePatterns": ["^org.springframework.ws:"]
        }
      ]
    },
    "springfoxMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from springfox monorepo together",
          "extends": "monorepo:springfox",
          "groupName": "springfox monorepo"
        }
      ]
    },
    "storybookMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from storybook monorepo together",
          "extends": "monorepo:storybook",
          "groupName": "storybook monorepo"
        }
      ]
    },
    "strapiMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from strapi monorepo together",
          "extends": "monorepo:strapi",
          "groupName": "strapi monorepo"
        }
      ]
    },
    "strykerMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from stryker monorepo together",
          "extends": "monorepo:stryker",
          "groupName": "stryker monorepo"
        }
      ]
    },
    "surveyjsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from surveyjs monorepo together",
          "extends": "monorepo:surveyjs",
          "groupName": "surveyjs monorepo"
        }
      ]
    },
    "symfony": {
      "description": "Group PHP symfony packages together",
      "packageRules": [
        {
          "packagePatterns": ["^symfony/"],
          "groupName": "symfony packages",
          "groupSlug": "symfony"
        }
      ]
    },
    "telus-tdsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from telus-tds monorepo together",
          "extends": "monorepo:telus-tds",
          "groupName": "telus-tds monorepo"
        }
      ]
    },
    "test": {
      "description": "Group all test packages together",
      "packageRules": [
        {"extends": "packages:test", "groupName": "test packages"}
      ]
    },
    "testNonMajor": {
      "description": "Group all non-major test package updates together",
      "packageRules": [
        {"extends": "packages:test", "minor": {"groupName": "test packages"}}
      ]
    },
    "treatMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from treat monorepo together",
          "extends": "monorepo:treat",
          "groupName": "treat monorepo"
        }
      ]
    },
    "typefacesMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from typefaces monorepo together",
          "extends": "monorepo:typefaces",
          "groupName": "typefaces monorepo"
        }
      ]
    },
    "typescript-eslintMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from typescript-eslint monorepo together",
          "extends": "monorepo:typescript-eslint",
          "groupName": "typescript-eslint monorepo"
        }
      ]
    },
    "typography-jsMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from typography-js monorepo together",
          "extends": "monorepo:typography-js",
          "groupName": "typography-js monorepo"
        }
      ]
    },
    "unitTest": {
      "description": "Group all unit test packages together",
      "packageRules": [
        {"extends": "packages:unitTest", "groupName": "unit test packages"}
      ]
    },
    "unitTestNonMajor": {
      "description": "Group all unit test packages together",
      "packageRules": [
        {
          "extends": "packages:unitTest",
          "minor": {"groupName": "unit test packages"}
        }
      ]
    },
    "uppyMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from uppy monorepo together",
          "extends": "monorepo:uppy",
          "groupName": "uppy monorepo"
        }
      ]
    },
    "vue-cliMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from vue-cli monorepo together",
          "extends": "monorepo:vue-cli",
          "groupName": "vue-cli monorepo"
        }
      ]
    },
    "vueMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from vue monorepo together",
          "extends": "monorepo:vue",
          "groupName": "vue monorepo"
        }
      ]
    },
    "vuepressMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from vuepress monorepo together",
          "extends": "monorepo:vuepress",
          "groupName": "vuepress monorepo"
        }
      ]
    },
    "webdriverioMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from webdriverio monorepo together",
          "extends": "monorepo:webdriverio",
          "groupName": "webdriverio monorepo"
        }
      ]
    },
    "wordpressMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from wordpress monorepo together",
          "extends": "monorepo:wordpress",
          "groupName": "wordpress monorepo"
        }
      ]
    },
    "workboxMonorepo": {
      "packageRules": [
        {
          "description": "Group packages from workbox monorepo together",
          "extends": "monorepo:workbox",
          "groupName": "workbox monorepo"
        }
      ]
    }
  },
  "helpers": {
    "disableTypesNodeMajor": {
      "packageRules": [
        {"packageNames": ["@types/node"], "major": {"enabled": false}}
      ]
    },
    "followTypescriptNext": {
      "description": "Keep <typescript> version in sync with the <code>next</code> tag",
      "extends": [":followTag(typescript, next)"]
    },
    "followTypescriptRc": {
      "description": "Keep <typescript> version in sync with the <code>rc</code> tag",
      "extends": [":followTag(typescript, rc)"]
    },
    "oddIsUnstable": {
      "description": "DEPRECATED: Odd version numbers are classified as unstable"
    },
    "oddIsUnstablePackages": {
      "description": "DEPRECATED: Preconfigure dependencies where an odd major version indicates unstable (Docker-only)"
    }
  },
  "monorepo": {
    "Swashbuckle": {
      "description": "Swashbuckle monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/domaindrivendev/Swashbuckle.AspNetCore"
      ]
    },
    "accounts": {
      "description": "accounts monorepo",
      "sourceUrlPrefixes": ["https://github.com/accounts-js/accounts"]
    },
    "ag-grid": {
      "description": "ag-grid monorepo",
      "sourceUrlPrefixes": ["https://github.com/ag-grid/ag-grid"]
    },
    "algolia-react-instantsearch": {
      "description": "algolia-react-instantsearch monorepo",
      "sourceUrlPrefixes": ["https://github.com/algolia/react-instantsearch"]
    },
    "angular": {
      "description": "angular monorepo",
      "sourceUrlPrefixes": ["https://github.com/angular/angular"]
    },
    "angular1": {
      "description": "angular1 monorepo",
      "sourceUrlPrefixes": ["https://github.com/angular/angular.js"]
    },
    "angularcli": {
      "description": "angularcli monorepo",
      "sourceUrlPrefixes": ["https://github.com/angular/angular-cli"]
    },
    "angularmaterial": {
      "description": "angularmaterial monorepo",
      "packagePatterns": ["^@angular/material", "^@angular/cdk"]
    },
    "apollo-server": {
      "description": "apollo-server monorepo",
      "sourceUrlPrefixes": ["https://github.com/apollographql/apollo-server"]
    },
    "apolloclient": {
      "description": "apolloclient monorepo",
      "sourceUrlPrefixes": ["https://github.com/apollographql/apollo-client"]
    },
    "apollolink": {
      "description": "apollolink monorepo",
      "sourceUrlPrefixes": ["https://github.com/apollographql/apollo-link"]
    },
    "arcus background-jobs": {
      "description": "arcus background-jobs monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/arcus-azure/arcus.backgroundjobs"
      ]
    },
    "arcus event-grid": {
      "description": "arcus event-grid monorepo",
      "sourceUrlPrefixes": ["https://github.com/arcus-azure/arcus.eventgrid"]
    },
    "arcus messaging": {
      "description": "arcus messaging monorepo",
      "sourceUrlPrefixes": ["https://github.com/arcus-azure/arcus.messaging"]
    },
    "arcus observability": {
      "description": "arcus observability monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/arcus-azure/arcus.observability"
      ]
    },
    "arcus security": {
      "description": "arcus security monorepo",
      "sourceUrlPrefixes": ["https://github.com/arcus-azure/arcus.security"]
    },
    "arcus webapi": {
      "description": "arcus webapi monorepo",
      "sourceUrlPrefixes": ["https://github.com/arcus-azure/arcus.webapi"]
    },
    "aspnet AspNetWebStack": {
      "description": "aspnet AspNetWebStack monorepo",
      "sourceUrlPrefixes": ["https://github.com/aspnet/AspNetWebStack"]
    },
    "aspnet Extensions": {
      "description": "aspnet Extensions monorepo",
      "sourceUrlPrefixes": ["https://github.com/aspnet/Extensions"]
    },
    "aws-cdk": {
      "description": "aws-cdk monorepo",
      "sourceUrlPrefixes": ["https://github.com/aws/aws-cdk"]
    },
    "aws-java-sdk": {
      "description": "aws-java-sdk monorepo",
      "packagePatterns": ["^com.amazonaws:aws-java-sdk-"]
    },
    "awsappsync": {
      "description": "awsappsync monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/awslabs/aws-mobile-appsync-sdk-js"
      ]
    },
    "azure azure-libraries-for-net": {
      "description": "azure azure-libraries-for-net monorepo",
      "sourceUrlPrefixes": ["https://github.com/Azure/azure-libraries-for-net"]
    },
    "azure azure-sdk-for-net": {
      "description": "azure azure-sdk-for-net monorepo",
      "sourceUrlPrefixes": ["https://github.com/Azure/azure-sdk-for-net"]
    },
    "azure azure-storage-net": {
      "description": "azure azure-storage-net monorepo",
      "sourceUrlPrefixes": ["https://github.com/Azure/azure-storage-net"]
    },
    "babel": {
      "description": "babel monorepo",
      "sourceUrlPrefixes": ["https://github.com/babel/babel"]
    },
    "babel6": {
      "description": "babel6 monorepo",
      "packagePatterns": ["^babel6$"]
    },
    "baset": {
      "description": "baset monorepo",
      "sourceUrlPrefixes": ["https://github.com/igmat/baset"]
    },
    "brave": {
      "description": "brave monorepo",
      "sourceUrlPrefixes": ["https://github.com/openzipkin/brave"]
    },
    "bugsnag-js": {
      "description": "bugsnag-js monorepo",
      "sourceUrlPrefixes": ["https://github.com/bugsnag/bugsnag-js"]
    },
    "capacitor": {
      "description": "capacitor monorepo",
      "sourceUrlPrefixes": ["https://github.com/ionic-team/capacitor"]
    },
    "clarity": {
      "description": "clarity monorepo",
      "sourceUrlPrefixes": ["https://github.com/vmware/clarity"]
    },
    "commitlint": {
      "description": "commitlint monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/conventional-changelog/commitlint"
      ]
    },
    "devextreme-reactive": {
      "description": "devextreme-reactive monorepo",
      "sourceUrlPrefixes": ["https://github.com/DevExpress/devextreme-reactive"]
    },
    "dropwizard": {
      "description": "dropwizard monorepo",
      "sourceUrlPrefixes": ["https://github.com/dropwizard/dropwizard"]
    },
    "electron-forge": {
      "description": "electron-forge monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/electron-userland/electron-forge"
      ]
    },
    "ember-decorators": {
      "description": "ember-decorators monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/ember-decorators/ember-decorators"
      ]
    },
    "emotion": {
      "description": "emotion monorepo",
      "sourceUrlPrefixes": ["https://github.com/emotion-js/emotion"]
    },
    "expo": {
      "description": "expo monorepo",
      "sourceUrlPrefixes": ["https://github.com/expo/expo"]
    },
    "fimbullinter": {
      "description": "fimbullinter monorepo",
      "sourceUrlPrefixes": ["https://github.com/fimbullinter/wotan"]
    },
    "flopflip": {
      "description": "flopflip monorepo",
      "sourceUrlPrefixes": ["https://github.com/tdeekens/flopflip"]
    },
    "framework7": {
      "description": "framework7 monorepo",
      "sourceUrlPrefixes": ["https://github.com/framework7io/framework7"]
    },
    "gatsby": {
      "description": "gatsby monorepo",
      "sourceUrlPrefixes": ["https://github.com/gatsbyjs/gatsby"]
    },
    "graphql-modules": {
      "description": "graphql-modules monorepo",
      "sourceUrlPrefixes": ["https://github.com/Urigo/graphql-modules"]
    },
    "graphql-toolkit": {
      "description": "graphql-toolkit monorepo",
      "sourceUrlPrefixes": ["https://github.com/ardatan/graphql-toolkit"]
    },
    "graphqlcodegenerator": {
      "description": "graphqlcodegenerator monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/dotansimha/graphql-code-generator",
        "https://github.com/dotansimha/graphql-codegen"
      ]
    },
    "hamcrest": {
      "description": "hamcrest monorepo",
      "sourceUrlPrefixes": ["https://github.com/hamcrest/JavaHamcrest"]
    },
    "hapijs": {
      "description": "hapijs monorepo",
      "sourceUrlPrefixes": ["https://github.com/hapijs"]
    },
    "infrastructure": {
      "description": "infrastructure monorepo",
      "sourceUrlPrefixes": ["https://github.com/instructure/instructure-ui"]
    },
    "ionic-native": {
      "description": "ionic-native monorepo",
      "sourceUrlPrefixes": ["https://github.com/ionic-team/ionic-native"]
    },
    "jasmine": {
      "description": "jasmine monorepo",
      "sourceUrlPrefixes": ["https://github.com/jasmine/jasmine"]
    },
    "jersey": {
      "description": "jersey monorepo",
      "sourceUrlPrefixes": ["https://github.com/eclipse-ee4j/jersey"]
    },
    "jest": {
      "description": "jest monorepo",
      "sourceUrlPrefixes": ["https://github.com/facebook/jest"]
    },
    "lerna": {
      "description": "lerna monorepo",
      "sourceUrlPrefixes": ["https://github.com/lerna/lerna"]
    },
    "lingui": {
      "description": "lingui monorepo",
      "sourceUrlPrefixes": ["https://github.com/lingui/js-lingui"]
    },
    "lodash": {
      "description": "lodash monorepo",
      "sourceUrlPrefixes": ["https://github.com/lodash/"]
    },
    "loopback": {
      "description": "loopback monorepo",
      "sourceUrlPrefixes": ["https://github.com/strongloop/loopback-next"]
    },
    "material": {
      "description": "material monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/material-components/material-components-web"
      ]
    },
    "mdc-react": {
      "description": "mdc-react monorepo",
      "sourceUrlPrefixes": ["material-components/material-components-web-react"]
    },
    "mdx": {
      "description": "mdx monorepo",
      "sourceUrlPrefixes": ["https://github.com/mdx-js/mdx"]
    },
    "mui": {
      "description": "mui monorepo",
      "sourceUrlPrefixes": ["https://github.com/mui-org/material-ui"]
    },
    "nest": {
      "description": "nest monorepo",
      "sourceUrlPrefixes": ["https://github.com/nestjs/nest"]
    },
    "neutrino": {
      "description": "neutrino monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/neutrinojs/neutrino",
        "https://github.com/mozilla-neutrino/neutrino-dev"
      ]
    },
    "nextjs": {
      "description": "nextjs monorepo",
      "sourceUrlPrefixes": ["https://github.com/zeit/next.js"]
    },
    "ngrx": {
      "description": "ngrx monorepo",
      "sourceUrlPrefixes": ["https://github.com/ngrx/"]
    },
    "ngx-formly": {
      "description": "ngx-formly monorepo",
      "sourceUrlPrefixes": ["https://github.com/ngx-formly/ngx-formly"]
    },
    "ngxs-store": {
      "description": "ngxs-store monorepo",
      "sourceUrlPrefixes": ["https://github.com/ngxs/store"]
    },
    "nrwl": {
      "description": "nrwl monorepo",
      "sourceUrlPrefixes": ["https://github.com/nrwl/"]
    },
    "nuxtjs": {
      "description": "nuxtjs monorepo",
      "sourceUrlPrefixes": ["https://github.com/nuxt/nuxt.js"]
    },
    "openfeign": {
      "description": "openfeign monorepo",
      "sourceUrlPrefixes": ["https://github.com/OpenFeign/feign"]
    },
    "picasso": {
      "description": "picasso monorepo",
      "sourceUrlPrefixes": ["https://github.com/qlik-oss/picasso.js"]
    },
    "pollyjs": {
      "description": "pollyjs monorepo",
      "sourceUrlPrefixes": ["https://github.com/Netflix/pollyjs"]
    },
    "pouchdb": {
      "description": "pouchdb monorepo",
      "sourceUrlPrefixes": ["https://github.com/pouchdb/pouchdb"]
    },
    "react": {
      "description": "react monorepo",
      "sourceUrlPrefixes": ["https://github.com/facebook/react"]
    },
    "react-apollo": {
      "description": "react-apollo monorepo",
      "sourceUrlPrefixes": ["https://github.com/apollographql/react-apollo"]
    },
    "react-dnd": {
      "description": "react-dnd monorepo",
      "sourceUrlPrefixes": ["https://github.com/react-dnd/react-dnd"]
    },
    "react-navigation": {
      "description": "react-navigation monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/react-navigation/react-navigation"
      ]
    },
    "reactivestack-cookies": {
      "description": "reactivestack-cookies monorepo",
      "sourceUrlPrefixes": ["https://github.com/reactivestack/cookies"]
    },
    "reactrouter": {
      "description": "reactrouter monorepo",
      "sourceUrlPrefixes": ["https://github.com/ReactTraining/react-router"]
    },
    "reakit": {
      "description": "reakit monorepo",
      "sourceUrlPrefixes": ["https://github.com/reakit/reakit"]
    },
    "remark": {
      "description": "remark monorepo",
      "sourceUrlPrefixes": ["https://github.com/remarkjs/remark"]
    },
    "router5": {
      "description": "router5 monorepo",
      "sourceUrlPrefixes": ["https://github.com/router5/router5"]
    },
    "sanity": {
      "description": "sanity monorepo",
      "sourceUrlPrefixes": ["https://github.com/sanity-io/sanity"]
    },
    "semantic-release": {
      "description": "semantic-release monorepo",
      "sourceUrlPrefixes": ["https://github.com/semantic-release/"]
    },
    "sentry": {
      "description": "sentry monorepo",
      "sourceUrlPrefixes": ["https://github.com/getsentry/sentry-javascript"]
    },
    "springfox": {
      "description": "springfox monorepo",
      "sourceUrlPrefixes": ["https://github.com/springfox/springfox"]
    },
    "storybook": {
      "description": "storybook monorepo",
      "sourceUrlPrefixes": ["https://github.com/storybookjs/storybook"]
    },
    "strapi": {
      "description": "strapi monorepo",
      "sourceUrlPrefixes": ["https://github.com/strapi/strapi"]
    },
    "stryker": {
      "description": "stryker monorepo",
      "sourceUrlPrefixes": ["https://github.com/stryker-mutator/stryker"]
    },
    "surveyjs": {
      "description": "surveyjs monorepo",
      "sourceUrlPrefixes": ["https://github.com/surveyjs/surveyjs"]
    },
    "telus-tds": {
      "description": "telus-tds monorepo",
      "sourceUrlPrefixes": ["https://github.com/telusdigital/tds"]
    },
    "treat": {
      "description": "treat monorepo",
      "sourceUrlPrefixes": ["https://github.com/seek-oss/treat"]
    },
    "typefaces": {
      "description": "typefaces monorepo",
      "sourceUrlPrefixes": ["https://github.com/KyleAMathews/typefaces"]
    },
    "typescript-eslint": {
      "description": "typescript-eslint monorepo",
      "sourceUrlPrefixes": [
        "https://github.com/typescript-eslint/typescript-eslint"
      ]
    },
    "typography-js": {
      "description": "typography-js monorepo",
      "sourceUrlPrefixes": ["https://github.com/KyleAMathews/typography.js"]
    },
    "uppy": {
      "description": "uppy monorepo",
      "sourceUrlPrefixes": ["https://github.com/transloadit/uppy"]
    },
    "vue": {
      "description": "vue monorepo",
      "sourceUrlPrefixes": ["https://github.com/vuejs/vue"]
    },
    "vue-cli": {
      "description": "vue-cli monorepo",
      "sourceUrlPrefixes": ["https://github.com/vuejs/vue-cli"]
    },
    "vuepress": {
      "description": "vuepress monorepo",
      "sourceUrlPrefixes": ["https://github.com/vuejs/vuepress"]
    },
    "webdriverio": {
      "description": "webdriverio monorepo",
      "sourceUrlPrefixes": ["https://github.com/webdriverio/webdriverio"]
    },
    "wordpress": {
      "description": "wordpress monorepo",
      "packagePatterns": ["^@wordpress/"]
    },
    "workbox": {
      "description": "workbox monorepo",
      "sourceUrlPrefixes": ["https://github.com/googlechrome/workbox"]
    }
  },
  "packages": {
    "angularJs": {
      "description": "All angular.js packages",
      "packageNames": [
        "angular",
        "angular-animate",
        "angular-scroll",
        "angular-sanitize"
      ]
    },
    "apollographql": {
      "description": "All packages published by Apollo GraphQL",
      "sourceUrlPrefixes": ["https://github.com/apollographql/"]
    },
    "eslint": {
      "description": "All eslint packages",
      "packageNames": ["babel-eslint"],
      "packagePatterns": ["^eslint"]
    },
    "gatsby": {
      "description": "All packages published by Gatsby",
      "extends": ["monorepo:gatsby"]
    },
    "jsTest": {
      "description": "JavaScript test packages",
      "extends": ["packages:jsUnitTest"]
    },
    "jsUnitTest": {
      "description": "Unit test packages for javascript",
      "packageNames": [
        "coveralls",
        "istanbul",
        "mock-fs",
        "nock",
        "nyc",
        "proxyquire",
        "supertest"
      ],
      "packagePatterns": [
        "^chai",
        "^jest",
        "^mocha",
        "^qunit",
        "^sinon",
        "^should"
      ]
    },
    "linters": {
      "description": "All lint-related packages",
      "extends": ["packages:eslint", "packages:stylelint", "packages:tslint"],
      "packageNames": ["remark-lint"]
    },
    "mapbox": {
      "description": "All mapbox-related packages",
      "packagePatterns": ["^(leaflet|mapbox)"]
    },
    "postcss": {
      "description": "All postcss packages",
      "packageNames": ["postcss"],
      "packagePatterns": ["^postcss-"]
    },
    "stylelint": {
      "description": "All stylelint packages",
      "packagePatterns": ["^stylelint"]
    },
    "test": {"description": "Test packages", "extends": ["packages:unitTest"]},
    "tslint": {
      "description": "All tslint packages",
      "packageNames": ["codelyzer"],
      "packagePatterns": ["\\btslint\\b"]
    },
    "unitTest": {
      "description": "All unit test packages",
      "extends": ["packages:jsUnitTest"]
    }
  },
  "preview": {
    "buildkite": {
      "buildkite": {"enabled": true},
      "description": "Enable buildkite functionality"
    },
    "dockerCompose": {
      "description": "Enable docker compose image updating",
      "docker-compose": {"enabled": true}
    },
    "dockerVersions": {
      "description": "Upgrade docker tags to newer versions",
      "docker": {"major": {"enabled": true}, "minor": {"enabled": true}}
    }
  },
  "schedule": {
    "daily": {"description": "Schedule daily", "schedule": "before 2am"},
    "earlyMondays": {
      "description": "Weekly schedule on early monday mornings",
      "schedule": "before 3am on Monday"
    },
    "monthly": {
      "description": "Schedule monthly",
      "schedule": "before 3am on the first day of the month"
    },
    "nonOfficeHours": {
      "description": "Schedule for typical non-office hours (night time and weekends)",
      "schedule": [
        "after 10pm every weekday",
        "before 5am every weekday",
        "every weekend"
      ]
    },
    "weekdays": {
      "description": "Schedule for weekdays",
      "schedule": "every weekday"
    },
    "weekends": {
      "description": "Schedule for weekends",
      "schedule": "every weekend"
    },
    "weekly": {
      "description": "Schedule weekly",
      "extends": ["schedule:earlyMondays"]
    }
  }
}