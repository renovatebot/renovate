import { setHighestVulnerabilitySeverity } from './utils';

const config: Record<string, any> = {
  vulnerabilitySeverity: undefined,
};
let parentConfig: Record<string, any>;
let childConfig: Record<string, any>;

describe('util/vulnerability/utils', () => {
  it('parent CRITICAL vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'CRITICAL',
    };

    childConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('CRITICAL');
  });

  it('child CRITICAL vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    childConfig = {
      vulnerabilitySeverity: 'CRITICAL',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('CRITICAL');
  });

  it('parent HIGH vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'HIGH',
    };

    childConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('HIGH');
  });

  it('child HIGH vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    childConfig = {
      vulnerabilitySeverity: 'HIGH',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('HIGH');
  });

  it('parent MODERATE vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    childConfig = {
      vulnerabilitySeverity: 'LOW',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('MODERATE');
  });

  it('child MODERATE vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'LOW',
    };

    childConfig = {
      vulnerabilitySeverity: 'MODERATE',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('MODERATE');
  });

  it('parent LOW vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: 'LOW',
    };

    childConfig = {
      vulnerabilitySeverity: undefined,
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('LOW');
  });

  it('child LOW vulnerability severity rating is maintained', () => {
    parentConfig = {
      vulnerabilitySeverity: undefined,
    };

    childConfig = {
      vulnerabilitySeverity: 'LOW',
    };

    setHighestVulnerabilitySeverity(config, parentConfig, childConfig);

    expect(config.vulnerabilitySeverity).toBe('LOW');
  });
});
